
Lab 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800114  00800114  00000ba6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001255  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b0  00000000  00000000  00001fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c00  00000000  00000000  0000257f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000725  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bc8  00000000  00000000  00003c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000483d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	82 c1       	rjmp	.+772    	; 0x32a <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 36       	cpi	r26, 0x67	; 103
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	1a c5       	rjmp	.+2612   	; 0xafa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

#include "lcd.h"
#include "util.h"

void main() {
	lcd_init();
  c8:	39 d0       	rcall	.+114    	; 0x13c <lcd_init>
	init_push_buttons();
  ca:	46 d1       	rcall	.+652    	; 0x358 <init_push_buttons>
	shaft_encoder_init();
  cc:	4c d1       	rcall	.+664    	; 0x366 <shaft_encoder_init>
	stepper_init();
  ce:	68 d1       	rcall	.+720    	; 0x3a0 <stepper_init>

	while(1) { // loop indefinitely
		int button = read_shaft_encoder();
		
		char t = move_stepper_motor_by_step(20, button);
		lprintf("Button: %x", t);
  d0:	c8 e0       	ldi	r28, 0x08	; 8
  d2:	d1 e0       	ldi	r29, 0x01	; 1
	init_push_buttons();
	shaft_encoder_init();
	stepper_init();

	while(1) { // loop indefinitely
		int button = read_shaft_encoder();
  d4:	4f d1       	rcall	.+670    	; 0x374 <read_shaft_encoder>
		
		char t = move_stepper_motor_by_step(20, button);
  d6:	bc 01       	movw	r22, r24
  d8:	84 e1       	ldi	r24, 0x14	; 20
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	6e d1       	rcall	.+732    	; 0x3ba <move_stepper_motor_by_step>
		lprintf("Button: %x", t);
  de:	1f 92       	push	r1
  e0:	8f 93       	push	r24
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	7b d0       	rcall	.+246    	; 0x1de <lprintf>
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	f1 cf       	rjmp	.-30     	; 0xd4 <main+0xc>

000000f2 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
  f2:	de 9a       	sbi	0x1b, 6	; 27
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	03 d1       	rcall	.+518    	; 0x2fe <wait_ms>
  f8:	de 98       	cbi	0x1b, 6	; 27
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	08 95       	ret

00000102 <lcd_command>:
 102:	cf 93       	push	r28
 104:	c8 2f       	mov	r28, r24
 106:	dc 98       	cbi	0x1b, 4	; 27
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	9c 2f       	mov	r25, r28
 10c:	92 95       	swap	r25
 10e:	9f 70       	andi	r25, 0x0F	; 15
 110:	89 2b       	or	r24, r25
 112:	8b bb       	out	0x1b, r24	; 27
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	ed df       	rcall	.-38     	; 0xf2 <lcd_toggle_clear>
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	cf 70       	andi	r28, 0x0F	; 15
 11c:	c8 2b       	or	r28, r24
 11e:	cb bb       	out	0x1b, r28	; 27
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	e7 df       	rcall	.-50     	; 0xf2 <lcd_toggle_clear>
 124:	dc 9a       	sbi	0x1b, 4	; 27
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <lcd_clear>:
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	ea df       	rcall	.-44     	; 0x102 <lcd_command>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	e5 c0       	rjmp	.+458    	; 0x2fe <wait_ms>
 134:	08 95       	ret

00000136 <lcd_home_line1>:
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	e4 cf       	rjmp	.-56     	; 0x102 <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_init>:
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	8b bb       	out	0x1b, r24	; 27
 144:	de 9a       	sbi	0x1b, 6	; 27
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	d9 d0       	rcall	.+434    	; 0x2fe <wait_ms>
 14c:	de 98       	cbi	0x1b, 6	; 27
 14e:	85 e0       	ldi	r24, 0x05	; 5
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	d5 d0       	rcall	.+426    	; 0x2fe <wait_ms>
 154:	de 9a       	sbi	0x1b, 6	; 27
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	d1 d0       	rcall	.+418    	; 0x2fe <wait_ms>
 15c:	de 98       	cbi	0x1b, 6	; 27
 15e:	de 9a       	sbi	0x1b, 6	; 27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	cc d0       	rcall	.+408    	; 0x2fe <wait_ms>
 166:	de 98       	cbi	0x1b, 6	; 27
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	c1 df       	rcall	.-126    	; 0xf2 <lcd_toggle_clear>
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	8b bb       	out	0x1b, r24	; 27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	bd df       	rcall	.-134    	; 0xf2 <lcd_toggle_clear>
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8e 60       	ori	r24, 0x0E	; 14
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	b8 df       	rcall	.-144    	; 0xf2 <lcd_toggle_clear>
 182:	8b b3       	in	r24, 0x1b	; 27
 184:	8b bb       	out	0x1b, r24	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	b4 df       	rcall	.-152    	; 0xf2 <lcd_toggle_clear>
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	8b bb       	out	0x1b, r24	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	af df       	rcall	.-162    	; 0xf2 <lcd_toggle_clear>
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	8b bb       	out	0x1b, r24	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	ab df       	rcall	.-170    	; 0xf2 <lcd_toggle_clear>
 19c:	d8 9a       	sbi	0x1b, 0	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	a8 df       	rcall	.-176    	; 0xf2 <lcd_toggle_clear>
 1a2:	dc 9a       	sbi	0x1b, 4	; 27
 1a4:	c8 cf       	rjmp	.-112    	; 0x136 <lcd_home_line1>
 1a6:	08 95       	ret

000001a8 <lcd_home_line2>:
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	ab cf       	rjmp	.-170    	; 0x102 <lcd_command>
 1ac:	08 95       	ret

000001ae <lcd_home_line3>:
 1ae:	84 e9       	ldi	r24, 0x94	; 148
 1b0:	a8 cf       	rjmp	.-176    	; 0x102 <lcd_command>
 1b2:	08 95       	ret

000001b4 <lcd_home_line4>:
 1b4:	84 ed       	ldi	r24, 0xD4	; 212
 1b6:	a5 cf       	rjmp	.-182    	; 0x102 <lcd_command>
 1b8:	08 95       	ret

000001ba <lcd_putc>:
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	9c 2f       	mov	r25, r28
 1c2:	92 95       	swap	r25
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	89 2b       	or	r24, r25
 1c8:	8b bb       	out	0x1b, r24	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	92 df       	rcall	.-220    	; 0xf2 <lcd_toggle_clear>
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	cf 70       	andi	r28, 0x0F	; 15
 1d2:	c8 2b       	or	r28, r24
 1d4:	cb bb       	out	0x1b, r28	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8c df       	rcall	.-232    	; 0xf2 <lcd_toggle_clear>
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
 1de:	cf 92       	push	r12
 1e0:	df 92       	push	r13
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	c1 55       	subi	r28, 0x51	; 81
 1f4:	d1 09       	sbc	r29, r1
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	fe 01       	movw	r30, r28
 202:	e4 5a       	subi	r30, 0xA4	; 164
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	41 91       	ld	r20, Z+
 208:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
 20a:	9f 01       	movw	r18, r30
 20c:	61 e5       	ldi	r22, 0x51	; 81
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	a6 d1       	rcall	.+844    	; 0x562 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	90 d1       	rcall	.+800    	; 0x542 <strcmp>
 222:	89 2b       	or	r24, r25
 224:	09 f4       	brne	.+2      	; 0x228 <lprintf+0x4a>
 226:	3f c0       	rjmp	.+126    	; 0x2a6 <lprintf+0xc8>
		return;
	
	strcpy(lastbuffer, buffer);
 228:	be 01       	movw	r22, r28
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	84 e1       	ldi	r24, 0x14	; 20
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	90 d1       	rcall	.+800    	; 0x554 <strcpy>
	lcd_clear();
 234:	7a df       	rcall	.-268    	; 0x12a <lcd_clear>
 236:	9e 01       	movw	r18, r28
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
 242:	0f 2e       	mov	r0, r31
 244:	f4 e1       	ldi	r31, 0x14	; 20
 246:	ef 2e       	mov	r14, r31
 248:	f1 2c       	mov	r15, r1
 24a:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
 24c:	24 c0       	rjmp	.+72     	; 0x296 <lprintf+0xb8>
		if (*str == '\n') {
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	49 f4       	brne	.+18     	; 0x264 <lprintf+0x86>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
 252:	c8 01       	movw	r24, r16
 254:	b7 01       	movw	r22, r14
 256:	4e d1       	rcall	.+668    	; 0x4f4 <__divmodhi4>
 258:	f7 01       	movw	r30, r14
 25a:	e8 1b       	sub	r30, r24
 25c:	f9 0b       	sbc	r31, r25
 25e:	0e 0f       	add	r16, r30
 260:	1f 1f       	adc	r17, r31
 262:	03 c0       	rjmp	.+6      	; 0x26a <lprintf+0x8c>
		} else {
			lcd_putc(*str);
 264:	aa df       	rcall	.-172    	; 0x1ba <lcd_putc>
			charnum++;
 266:	0f 5f       	subi	r16, 0xFF	; 255
 268:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
 26a:	c8 01       	movw	r24, r16
 26c:	b7 01       	movw	r22, r14
 26e:	42 d1       	rcall	.+644    	; 0x4f4 <__divmodhi4>
 270:	89 2b       	or	r24, r25
 272:	89 f4       	brne	.+34     	; 0x296 <lprintf+0xb8>
			switch (charnum / LCD_WIDTH) {
 274:	c8 01       	movw	r24, r16
 276:	b7 01       	movw	r22, r14
 278:	3d d1       	rcall	.+634    	; 0x4f4 <__divmodhi4>
 27a:	62 30       	cpi	r22, 0x02	; 2
 27c:	71 05       	cpc	r23, r1
 27e:	41 f0       	breq	.+16     	; 0x290 <lprintf+0xb2>
 280:	63 30       	cpi	r22, 0x03	; 3
 282:	71 05       	cpc	r23, r1
 284:	39 f0       	breq	.+14     	; 0x294 <lprintf+0xb6>
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	71 05       	cpc	r23, r1
 28a:	29 f4       	brne	.+10     	; 0x296 <lprintf+0xb8>
			case 1:
				lcd_home_line2();
 28c:	8d df       	rcall	.-230    	; 0x1a8 <lcd_home_line2>
				break;
 28e:	03 c0       	rjmp	.+6      	; 0x296 <lprintf+0xb8>
			case 2:
				lcd_home_line3();
 290:	8e df       	rcall	.-228    	; 0x1ae <lcd_home_line3>
				break;
 292:	01 c0       	rjmp	.+2      	; 0x296 <lprintf+0xb8>
			case 3:
				lcd_home_line4();
 294:	8f df       	rcall	.-226    	; 0x1b4 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
 296:	f6 01       	movw	r30, r12
 298:	81 91       	ld	r24, Z+
 29a:	6f 01       	movw	r12, r30
 29c:	88 23       	and	r24, r24
 29e:	19 f0       	breq	.+6      	; 0x2a6 <lprintf+0xc8>
 2a0:	00 35       	cpi	r16, 0x50	; 80
 2a2:	11 05       	cpc	r17, r1
 2a4:	a4 f2       	brlt	.-88     	; 0x24e <lprintf+0x70>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
 2a6:	cf 5a       	subi	r28, 0xAF	; 175
 2a8:	df 4f       	sbci	r29, 0xFF	; 255
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	08 95       	ret

000002c6 <timer2_start>:

	// INSERT CODE HERE!
	

	return REPLACEME;
}
 2c6:	10 92 66 01 	sts	0x0166, r1
 2ca:	10 92 65 01 	sts	0x0165, r1
 2ce:	81 11       	cpse	r24, r1
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <timer2_start+0x18>
 2d2:	8b e0       	ldi	r24, 0x0B	; 11
 2d4:	85 bd       	out	0x25, r24	; 37
 2d6:	87 b7       	in	r24, 0x37	; 55
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	87 bf       	out	0x37, r24	; 55
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <timer2_start+0x26>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	29 f4       	brne	.+10     	; 0x2ec <timer2_start+0x26>
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	85 bd       	out	0x25, r24	; 37
 2e6:	87 b7       	in	r24, 0x37	; 55
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	87 bf       	out	0x37, r24	; 55
 2ec:	78 94       	sei
 2ee:	08 95       	ret

000002f0 <timer2_stop>:
 2f0:	87 b7       	in	r24, 0x37	; 55
 2f2:	8f 77       	andi	r24, 0x7F	; 127
 2f4:	87 bf       	out	0x37, r24	; 55
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	85 bd       	out	0x25, r24	; 37
 2fc:	08 95       	ret

000002fe <wait_ms>:
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	8a ef       	ldi	r24, 0xFA	; 250
 306:	83 bd       	out	0x23, r24	; 35
 308:	10 92 66 01 	sts	0x0166, r1
 30c:	10 92 65 01 	sts	0x0165, r1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	d9 df       	rcall	.-78     	; 0x2c6 <timer2_start>
 314:	20 91 65 01 	lds	r18, 0x0165
 318:	30 91 66 01 	lds	r19, 0x0166
 31c:	2c 17       	cp	r18, r28
 31e:	3d 07       	cpc	r19, r29
 320:	c8 f3       	brcs	.-14     	; 0x314 <wait_ms+0x16>
 322:	e6 df       	rcall	.-52     	; 0x2f0 <timer2_stop>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <__vector_9>:
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	80 91 65 01 	lds	r24, 0x0165
 33c:	90 91 66 01 	lds	r25, 0x0166
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	90 93 66 01 	sts	0x0166, r25
 346:	80 93 65 01 	sts	0x0165, r24
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <init_push_buttons>:
 358:	84 b3       	in	r24, 0x14	; 20
 35a:	80 7c       	andi	r24, 0xC0	; 192
 35c:	84 bb       	out	0x14, r24	; 20
 35e:	85 b3       	in	r24, 0x15	; 21
 360:	8f 63       	ori	r24, 0x3F	; 63
 362:	85 bb       	out	0x15, r24	; 21
 364:	08 95       	ret

00000366 <shaft_encoder_init>:



/// Initialize PORTC for input from the shaft encoder
void shaft_encoder_init(void) {
	DDRC &= 0x3F;	//Setting PC6-PC7 to input
 366:	84 b3       	in	r24, 0x14	; 20
 368:	8f 73       	andi	r24, 0x3F	; 63
 36a:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0xC0;	//Setting pins' pull-up resistors
 36c:	85 b3       	in	r24, 0x15	; 21
 36e:	80 6c       	ori	r24, 0xC0	; 192
 370:	85 bb       	out	0x15, r24	; 21
 372:	08 95       	ret

00000374 <read_shaft_encoder>:
	// static variable to store the old value of A and B.
	// This variable will only be initialized the first time you call this function.
	static unsigned char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?
	
	// Function variables
	unsigned char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
 374:	23 b3       	in	r18, 0x13	; 19
 376:	20 7c       	andi	r18, 0xC0	; 192
	int rotation = 0;

	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
 378:	80 91 07 01 	lds	r24, 0x0107
 37c:	80 3c       	cpi	r24, 0xC0	; 192
 37e:	41 f4       	brne	.+16     	; 0x390 <read_shaft_encoder+0x1c>
		if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	20 34       	cpi	r18, 0x40	; 64
 386:	09 f0       	breq	.+2      	; 0x38a <read_shaft_encoder+0x16>
 388:	80 e0       	ldi	r24, 0x00	; 0
			rotation = 1;
		if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
 38a:	20 38       	cpi	r18, 0x80	; 128
 38c:	31 f4       	brne	.+12     	; 0x39a <read_shaft_encoder+0x26>
 38e:	03 c0       	rjmp	.+6      	; 0x396 <read_shaft_encoder+0x22>
	// This variable will only be initialized the first time you call this function.
	static unsigned char old_value = 0b11000000;		// Step 2: Based on how you decided to mask PINC in step 1, what would new_value be if the switch is in a groove?
	
	// Function variables
	unsigned char new_value = PINC & 0b11000000;			// Step 1: Decide how to read PINC so that the push buttons are masked
	int rotation = 0;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <read_shaft_encoder+0x26>
	// If the knob was in a groove
	if (old_value == 0b11000000) {			// Step 3: Enter here what you did for step 2.
		if (new_value == 0b01000000)		// What will new_value be if you're rotating CW out of a groove
			rotation = 1;
		if (new_value == 0b10000000)		// What will new_value be if you're rotating CCW out of a groove
			rotation = -1;
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	9f ef       	ldi	r25, 0xFF	; 255
	}

	old_value = new_value;
 39a:	20 93 07 01 	sts	0x0107, r18

	return rotation;
}
 39e:	08 95       	ret

000003a0 <stepper_init>:



/// Initialize PORTE to control the stepper motor
void stepper_init(void) {
	DDRE |= 0xF0;  	//Setting PE4-PE7 to output
 3a0:	82 b1       	in	r24, 0x02	; 2
 3a2:	80 6f       	ori	r24, 0xF0	; 240
 3a4:	82 b9       	out	0x02, r24	; 2
	PORTE &= 0x8F;  //Initial postion (0b1000) PE4-PE7
 3a6:	83 b1       	in	r24, 0x03	; 3
 3a8:	8f 78       	andi	r24, 0x8F	; 143
 3aa:	83 b9       	out	0x03, r24	; 3
	wait_ms(2);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	a6 df       	rcall	.-180    	; 0x2fe <wait_ms>
	PORTE &= 0x0F;  //Clear PE4-PE7
 3b2:	83 b1       	in	r24, 0x03	; 3
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	83 b9       	out	0x03, r24	; 3
 3b8:	08 95       	ret

000003ba <move_stepper_motor_by_step>:
 * Turn the stepper motor a given number of steps. 
 *
 * @param num_steps A value between 1 and 200 steps (1.8 to 360 degrees)
 * @param direction Indication of direction: 1 for CW and -1 for CCW 
 */
char  move_stepper_motor_by_step(int num_steps, int direction) {
 3ba:	cf 92       	push	r12
 3bc:	df 92       	push	r13
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	8c 01       	movw	r16, r24
// 		//PORTE = 0x10 & 0xF0;
// 		dum = 0x10;
// 	}
	
	//Clockwise
	if (direction == 1) {
 3cc:	61 30       	cpi	r22, 0x01	; 1
 3ce:	71 05       	cpc	r23, r1
 3d0:	e9 f5       	brne	.+122    	; 0x44c <move_stepper_motor_by_step+0x92>
		
		while ( i < num_steps) {
 3d2:	18 16       	cp	r1, r24
 3d4:	19 06       	cpc	r1, r25
 3d6:	0c f0       	brlt	.+2      	; 0x3da <move_stepper_motor_by_step+0x20>
 3d8:	7a c0       	rjmp	.+244    	; 0x4ce <move_stepper_motor_by_step+0x114>
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
					dum = dum << 1;
					} else if ((dum & 0b11110000) == 0x40) {
					PORTE = 0x80 & 0xF0;
					dum = dum << 1;
					} else if ((dum & 0b11110000) == 0x80) {
					PORTE = 0x10 & 0xF0;
 3de:	68 94       	set
 3e0:	ee 24       	eor	r14, r14
 3e2:	e4 f8       	bld	r14, 4
					dum = dum << 1;
					} else if ((dum & 0b11110000) == 0x20) {
					PORTE = 0x40 & 0xF0;
					dum = dum << 1;
					} else if ((dum & 0b11110000) == 0x40) {
					PORTE = 0x80 & 0xF0;
 3e4:	68 94       	set
 3e6:	cc 24       	eor	r12, r12
 3e8:	c7 f8       	bld	r12, 7
			
				if ((dum & 0b11110000) == 0x10) {
					PORTE = 0x20 & 0xF0;
					dum = dum << 1;
					} else if ((dum & 0b11110000) == 0x20) {
					PORTE = 0x40 & 0xF0;
 3ea:	68 94       	set
 3ec:	dd 24       	eor	r13, r13
 3ee:	d6 f8       	bld	r13, 6
	if (direction == 1) {
		
		while ( i < num_steps) {
			
				if ((dum & 0b11110000) == 0x10) {
					PORTE = 0x20 & 0xF0;
 3f0:	68 94       	set
 3f2:	ff 24       	eor	r15, r15
 3f4:	f5 f8       	bld	r15, 5
	//Clockwise
	if (direction == 1) {
		
		while ( i < num_steps) {
			
				if ((dum & 0b11110000) == 0x10) {
 3f6:	80 91 06 01 	lds	r24, 0x0106
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 3fc:	80 31       	cpi	r24, 0x10	; 16
 3fe:	39 f4       	brne	.+14     	; 0x40e <move_stepper_motor_by_step+0x54>
					PORTE = 0x20 & 0xF0;
 400:	f3 b8       	out	0x03, r15	; 3
					dum = dum << 1;
 402:	80 91 06 01 	lds	r24, 0x0106
 406:	88 0f       	add	r24, r24
 408:	80 93 06 01 	sts	0x0106, r24
 40c:	17 c0       	rjmp	.+46     	; 0x43c <move_stepper_motor_by_step+0x82>
					} else if ((dum & 0b11110000) == 0x20) {
 40e:	80 32       	cpi	r24, 0x20	; 32
 410:	39 f4       	brne	.+14     	; 0x420 <move_stepper_motor_by_step+0x66>
					PORTE = 0x40 & 0xF0;
 412:	d3 b8       	out	0x03, r13	; 3
					dum = dum << 1;
 414:	80 91 06 01 	lds	r24, 0x0106
 418:	88 0f       	add	r24, r24
 41a:	80 93 06 01 	sts	0x0106, r24
 41e:	0e c0       	rjmp	.+28     	; 0x43c <move_stepper_motor_by_step+0x82>
					} else if ((dum & 0b11110000) == 0x40) {
 420:	80 34       	cpi	r24, 0x40	; 64
 422:	39 f4       	brne	.+14     	; 0x432 <move_stepper_motor_by_step+0x78>
					PORTE = 0x80 & 0xF0;
 424:	c3 b8       	out	0x03, r12	; 3
					dum = dum << 1;
 426:	80 91 06 01 	lds	r24, 0x0106
 42a:	88 0f       	add	r24, r24
 42c:	80 93 06 01 	sts	0x0106, r24
 430:	05 c0       	rjmp	.+10     	; 0x43c <move_stepper_motor_by_step+0x82>
					} else if ((dum & 0b11110000) == 0x80) {
 432:	80 38       	cpi	r24, 0x80	; 128
 434:	19 f4       	brne	.+6      	; 0x43c <move_stepper_motor_by_step+0x82>
					PORTE = 0x10 & 0xF0;
 436:	e3 b8       	out	0x03, r14	; 3
					dum = 0x10;
 438:	e0 92 06 01 	sts	0x0106, r14
				}
			wait_ms(10);
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	5e df       	rcall	.-324    	; 0x2fe <wait_ms>
			i++;
 442:	21 96       	adiw	r28, 0x01	; 1
// 	}
	
	//Clockwise
	if (direction == 1) {
		
		while ( i < num_steps) {
 444:	c0 17       	cp	r28, r16
 446:	d1 07       	cpc	r29, r17
 448:	b1 f6       	brne	.-84     	; 0x3f6 <move_stepper_motor_by_step+0x3c>
 44a:	49 c0       	rjmp	.+146    	; 0x4de <move_stepper_motor_by_step+0x124>
					dum = 0x10;
				}
			wait_ms(10);
			i++;
		}
	} else if (direction == -1) {
 44c:	6f 3f       	cpi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	09 f0       	breq	.+2      	; 0x454 <move_stepper_motor_by_step+0x9a>
 452:	40 c0       	rjmp	.+128    	; 0x4d4 <move_stepper_motor_by_step+0x11a>
		
		while (i < num_steps ) {
 454:	10 16       	cp	r1, r16
 456:	11 06       	cpc	r1, r17
 458:	0c f0       	brlt	.+2      	; 0x45c <move_stepper_motor_by_step+0xa2>
 45a:	3f c0       	rjmp	.+126    	; 0x4da <move_stepper_motor_by_step+0x120>
 45c:	c0 e0       	ldi	r28, 0x00	; 0
 45e:	d0 e0       	ldi	r29, 0x00	; 0
				dum = dum >> 1;
				} else if ((dum & 0b11110000) == 0x40) {
				PORTE = 0x20 & 0xF0;
				dum = dum >> 1;
				} else if ((dum & 0b11110000) == 0x80) {
				PORTE = 0x40 & 0xF0;
 460:	68 94       	set
 462:	cc 24       	eor	r12, r12
 464:	c6 f8       	bld	r12, 6
				dum = 0x80;
				} else if ((dum & 0b11110000) == 0x20) {
				PORTE = 0x10 & 0xF0;
				dum = dum >> 1;
				} else if ((dum & 0b11110000) == 0x40) {
				PORTE = 0x20 & 0xF0;
 466:	68 94       	set
 468:	dd 24       	eor	r13, r13
 46a:	d5 f8       	bld	r13, 5
			
			if ((dum & 0b11110000) == 0x10) {
				PORTE = 0x80 & 0xF0;
				dum = 0x80;
				} else if ((dum & 0b11110000) == 0x20) {
				PORTE = 0x10 & 0xF0;
 46c:	68 94       	set
 46e:	ee 24       	eor	r14, r14
 470:	e4 f8       	bld	r14, 4
	} else if (direction == -1) {
		
		while (i < num_steps ) {
			
			if ((dum & 0b11110000) == 0x10) {
				PORTE = 0x80 & 0xF0;
 472:	68 94       	set
 474:	ff 24       	eor	r15, r15
 476:	f7 f8       	bld	r15, 7
		}
	} else if (direction == -1) {
		
		while (i < num_steps ) {
			
			if ((dum & 0b11110000) == 0x10) {
 478:	80 91 06 01 	lds	r24, 0x0106
 47c:	80 7f       	andi	r24, 0xF0	; 240
 47e:	80 31       	cpi	r24, 0x10	; 16
 480:	21 f4       	brne	.+8      	; 0x48a <move_stepper_motor_by_step+0xd0>
				PORTE = 0x80 & 0xF0;
 482:	f3 b8       	out	0x03, r15	; 3
				dum = 0x80;
 484:	f0 92 06 01 	sts	0x0106, r15
 488:	1a c0       	rjmp	.+52     	; 0x4be <move_stepper_motor_by_step+0x104>
				} else if ((dum & 0b11110000) == 0x20) {
 48a:	80 32       	cpi	r24, 0x20	; 32
 48c:	39 f4       	brne	.+14     	; 0x49c <move_stepper_motor_by_step+0xe2>
				PORTE = 0x10 & 0xF0;
 48e:	e3 b8       	out	0x03, r14	; 3
				dum = dum >> 1;
 490:	80 91 06 01 	lds	r24, 0x0106
 494:	86 95       	lsr	r24
 496:	80 93 06 01 	sts	0x0106, r24
 49a:	11 c0       	rjmp	.+34     	; 0x4be <move_stepper_motor_by_step+0x104>
				} else if ((dum & 0b11110000) == 0x40) {
 49c:	80 34       	cpi	r24, 0x40	; 64
 49e:	39 f4       	brne	.+14     	; 0x4ae <move_stepper_motor_by_step+0xf4>
				PORTE = 0x20 & 0xF0;
 4a0:	d3 b8       	out	0x03, r13	; 3
				dum = dum >> 1;
 4a2:	80 91 06 01 	lds	r24, 0x0106
 4a6:	86 95       	lsr	r24
 4a8:	80 93 06 01 	sts	0x0106, r24
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <move_stepper_motor_by_step+0x104>
				} else if ((dum & 0b11110000) == 0x80) {
 4ae:	80 38       	cpi	r24, 0x80	; 128
 4b0:	31 f4       	brne	.+12     	; 0x4be <move_stepper_motor_by_step+0x104>
				PORTE = 0x40 & 0xF0;
 4b2:	c3 b8       	out	0x03, r12	; 3
				dum = dum >> 1;
 4b4:	80 91 06 01 	lds	r24, 0x0106
 4b8:	86 95       	lsr	r24
 4ba:	80 93 06 01 	sts	0x0106, r24
			}
			wait_ms(10);
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	1d df       	rcall	.-454    	; 0x2fe <wait_ms>
			i++;
 4c4:	21 96       	adiw	r28, 0x01	; 1
			wait_ms(10);
			i++;
		}
	} else if (direction == -1) {
		
		while (i < num_steps ) {
 4c6:	c0 17       	cp	r28, r16
 4c8:	d1 07       	cpc	r29, r17
 4ca:	b1 f6       	brne	.-84     	; 0x478 <move_stepper_motor_by_step+0xbe>
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <move_stepper_motor_by_step+0x124>
// 	}
	
	//Clockwise
	if (direction == 1) {
		
		while ( i < num_steps) {
 4ce:	00 e0       	ldi	r16, 0x00	; 0
 4d0:	10 e0       	ldi	r17, 0x00	; 0
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <move_stepper_motor_by_step+0x124>
	// - Use bitwise operators to ensure the right 4 bits of PORTE are not affected
	// - Set the left 4 bits of PORTE to 0's at the end of your function (to allow the stepper motor to spin freely)
	
 	static char dum = 0b00010000 & 0b11110000;
	 
	 int i = 0;
 4d4:	00 e0       	ldi	r16, 0x00	; 0
 4d6:	10 e0       	ldi	r17, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <move_stepper_motor_by_step+0x124>
			wait_ms(10);
			i++;
		}
	} else if (direction == -1) {
		
		while (i < num_steps ) {
 4da:	00 e0       	ldi	r16, 0x00	; 0
 4dc:	10 e0       	ldi	r17, 0x00	; 0
			}
			wait_ms(10);
			i++;
		}
	}
	PORTE = 0b00000000;
 4de:	13 b8       	out	0x03, r1	; 3
	return i;
}
 4e0:	80 2f       	mov	r24, r16
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	df 90       	pop	r13
 4f0:	cf 90       	pop	r12
 4f2:	08 95       	ret

000004f4 <__divmodhi4>:
 4f4:	97 fb       	bst	r25, 7
 4f6:	07 2e       	mov	r0, r23
 4f8:	16 f4       	brtc	.+4      	; 0x4fe <__divmodhi4+0xa>
 4fa:	00 94       	com	r0
 4fc:	06 d0       	rcall	.+12     	; 0x50a <__divmodhi4_neg1>
 4fe:	77 fd       	sbrc	r23, 7
 500:	08 d0       	rcall	.+16     	; 0x512 <__divmodhi4_neg2>
 502:	0b d0       	rcall	.+22     	; 0x51a <__udivmodhi4>
 504:	07 fc       	sbrc	r0, 7
 506:	05 d0       	rcall	.+10     	; 0x512 <__divmodhi4_neg2>
 508:	3e f4       	brtc	.+14     	; 0x518 <__divmodhi4_exit>

0000050a <__divmodhi4_neg1>:
 50a:	90 95       	com	r25
 50c:	81 95       	neg	r24
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <__divmodhi4_neg2>:
 512:	70 95       	com	r23
 514:	61 95       	neg	r22
 516:	7f 4f       	sbci	r23, 0xFF	; 255

00000518 <__divmodhi4_exit>:
 518:	08 95       	ret

0000051a <__udivmodhi4>:
 51a:	aa 1b       	sub	r26, r26
 51c:	bb 1b       	sub	r27, r27
 51e:	51 e1       	ldi	r21, 0x11	; 17
 520:	07 c0       	rjmp	.+14     	; 0x530 <__udivmodhi4_ep>

00000522 <__udivmodhi4_loop>:
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	a6 17       	cp	r26, r22
 528:	b7 07       	cpc	r27, r23
 52a:	10 f0       	brcs	.+4      	; 0x530 <__udivmodhi4_ep>
 52c:	a6 1b       	sub	r26, r22
 52e:	b7 0b       	sbc	r27, r23

00000530 <__udivmodhi4_ep>:
 530:	88 1f       	adc	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	5a 95       	dec	r21
 536:	a9 f7       	brne	.-22     	; 0x522 <__udivmodhi4_loop>
 538:	80 95       	com	r24
 53a:	90 95       	com	r25
 53c:	bc 01       	movw	r22, r24
 53e:	cd 01       	movw	r24, r26
 540:	08 95       	ret

00000542 <strcmp>:
 542:	fb 01       	movw	r30, r22
 544:	dc 01       	movw	r26, r24
 546:	8d 91       	ld	r24, X+
 548:	01 90       	ld	r0, Z+
 54a:	80 19       	sub	r24, r0
 54c:	01 10       	cpse	r0, r1
 54e:	d9 f3       	breq	.-10     	; 0x546 <strcmp+0x4>
 550:	99 0b       	sbc	r25, r25
 552:	08 95       	ret

00000554 <strcpy>:
 554:	fb 01       	movw	r30, r22
 556:	dc 01       	movw	r26, r24
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	00 20       	and	r0, r0
 55e:	e1 f7       	brne	.-8      	; 0x558 <strcpy+0x4>
 560:	08 95       	ret

00000562 <vsnprintf>:
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	2e 97       	sbiw	r28, 0x0e	; 14
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	8c 01       	movw	r16, r24
 57c:	ca 01       	movw	r24, r20
 57e:	46 e0       	ldi	r20, 0x06	; 6
 580:	4c 83       	std	Y+4, r20	; 0x04
 582:	1a 83       	std	Y+2, r17	; 0x02
 584:	09 83       	std	Y+1, r16	; 0x01
 586:	77 ff       	sbrs	r23, 7
 588:	02 c0       	rjmp	.+4      	; 0x58e <vsnprintf+0x2c>
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	70 e8       	ldi	r23, 0x80	; 128
 58e:	61 50       	subi	r22, 0x01	; 1
 590:	71 09       	sbc	r23, r1
 592:	7e 83       	std	Y+6, r23	; 0x06
 594:	6d 83       	std	Y+5, r22	; 0x05
 596:	a9 01       	movw	r20, r18
 598:	bc 01       	movw	r22, r24
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	19 d0       	rcall	.+50     	; 0x5d2 <vfprintf>
 5a0:	4d 81       	ldd	r20, Y+5	; 0x05
 5a2:	5e 81       	ldd	r21, Y+6	; 0x06
 5a4:	57 fd       	sbrc	r21, 7
 5a6:	0a c0       	rjmp	.+20     	; 0x5bc <vsnprintf+0x5a>
 5a8:	2f 81       	ldd	r18, Y+7	; 0x07
 5aa:	38 85       	ldd	r19, Y+8	; 0x08
 5ac:	42 17       	cp	r20, r18
 5ae:	53 07       	cpc	r21, r19
 5b0:	0c f4       	brge	.+2      	; 0x5b4 <vsnprintf+0x52>
 5b2:	9a 01       	movw	r18, r20
 5b4:	f8 01       	movw	r30, r16
 5b6:	e2 0f       	add	r30, r18
 5b8:	f3 1f       	adc	r31, r19
 5ba:	10 82       	st	Z, r1
 5bc:	2e 96       	adiw	r28, 0x0e	; 14
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <vfprintf>:
 5d2:	2f 92       	push	r2
 5d4:	3f 92       	push	r3
 5d6:	4f 92       	push	r4
 5d8:	5f 92       	push	r5
 5da:	6f 92       	push	r6
 5dc:	7f 92       	push	r7
 5de:	8f 92       	push	r8
 5e0:	9f 92       	push	r9
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	2c 97       	sbiw	r28, 0x0c	; 12
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	7c 01       	movw	r14, r24
 608:	6b 01       	movw	r12, r22
 60a:	8a 01       	movw	r16, r20
 60c:	fc 01       	movw	r30, r24
 60e:	17 82       	std	Z+7, r1	; 0x07
 610:	16 82       	std	Z+6, r1	; 0x06
 612:	83 81       	ldd	r24, Z+3	; 0x03
 614:	81 ff       	sbrs	r24, 1
 616:	b0 c1       	rjmp	.+864    	; 0x978 <vfprintf+0x3a6>
 618:	ce 01       	movw	r24, r28
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	4c 01       	movw	r8, r24
 61e:	f7 01       	movw	r30, r14
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	f6 01       	movw	r30, r12
 624:	93 fd       	sbrc	r25, 3
 626:	85 91       	lpm	r24, Z+
 628:	93 ff       	sbrs	r25, 3
 62a:	81 91       	ld	r24, Z+
 62c:	6f 01       	movw	r12, r30
 62e:	88 23       	and	r24, r24
 630:	09 f4       	brne	.+2      	; 0x634 <vfprintf+0x62>
 632:	9e c1       	rjmp	.+828    	; 0x970 <vfprintf+0x39e>
 634:	85 32       	cpi	r24, 0x25	; 37
 636:	39 f4       	brne	.+14     	; 0x646 <vfprintf+0x74>
 638:	93 fd       	sbrc	r25, 3
 63a:	85 91       	lpm	r24, Z+
 63c:	93 ff       	sbrs	r25, 3
 63e:	81 91       	ld	r24, Z+
 640:	6f 01       	movw	r12, r30
 642:	85 32       	cpi	r24, 0x25	; 37
 644:	21 f4       	brne	.+8      	; 0x64e <vfprintf+0x7c>
 646:	b7 01       	movw	r22, r14
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	c7 d1       	rcall	.+910    	; 0x9da <fputc>
 64c:	e8 cf       	rjmp	.-48     	; 0x61e <vfprintf+0x4c>
 64e:	51 2c       	mov	r5, r1
 650:	31 2c       	mov	r3, r1
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	20 32       	cpi	r18, 0x20	; 32
 656:	a0 f4       	brcc	.+40     	; 0x680 <vfprintf+0xae>
 658:	8b 32       	cpi	r24, 0x2B	; 43
 65a:	69 f0       	breq	.+26     	; 0x676 <vfprintf+0xa4>
 65c:	30 f4       	brcc	.+12     	; 0x66a <vfprintf+0x98>
 65e:	80 32       	cpi	r24, 0x20	; 32
 660:	59 f0       	breq	.+22     	; 0x678 <vfprintf+0xa6>
 662:	83 32       	cpi	r24, 0x23	; 35
 664:	69 f4       	brne	.+26     	; 0x680 <vfprintf+0xae>
 666:	20 61       	ori	r18, 0x10	; 16
 668:	2c c0       	rjmp	.+88     	; 0x6c2 <vfprintf+0xf0>
 66a:	8d 32       	cpi	r24, 0x2D	; 45
 66c:	39 f0       	breq	.+14     	; 0x67c <vfprintf+0xaa>
 66e:	80 33       	cpi	r24, 0x30	; 48
 670:	39 f4       	brne	.+14     	; 0x680 <vfprintf+0xae>
 672:	21 60       	ori	r18, 0x01	; 1
 674:	26 c0       	rjmp	.+76     	; 0x6c2 <vfprintf+0xf0>
 676:	22 60       	ori	r18, 0x02	; 2
 678:	24 60       	ori	r18, 0x04	; 4
 67a:	23 c0       	rjmp	.+70     	; 0x6c2 <vfprintf+0xf0>
 67c:	28 60       	ori	r18, 0x08	; 8
 67e:	21 c0       	rjmp	.+66     	; 0x6c2 <vfprintf+0xf0>
 680:	27 fd       	sbrc	r18, 7
 682:	27 c0       	rjmp	.+78     	; 0x6d2 <vfprintf+0x100>
 684:	30 ed       	ldi	r19, 0xD0	; 208
 686:	38 0f       	add	r19, r24
 688:	3a 30       	cpi	r19, 0x0A	; 10
 68a:	78 f4       	brcc	.+30     	; 0x6aa <vfprintf+0xd8>
 68c:	26 ff       	sbrs	r18, 6
 68e:	06 c0       	rjmp	.+12     	; 0x69c <vfprintf+0xca>
 690:	fa e0       	ldi	r31, 0x0A	; 10
 692:	5f 9e       	mul	r5, r31
 694:	30 0d       	add	r19, r0
 696:	11 24       	eor	r1, r1
 698:	53 2e       	mov	r5, r19
 69a:	13 c0       	rjmp	.+38     	; 0x6c2 <vfprintf+0xf0>
 69c:	8a e0       	ldi	r24, 0x0A	; 10
 69e:	38 9e       	mul	r3, r24
 6a0:	30 0d       	add	r19, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	33 2e       	mov	r3, r19
 6a6:	20 62       	ori	r18, 0x20	; 32
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <vfprintf+0xf0>
 6aa:	8e 32       	cpi	r24, 0x2E	; 46
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <vfprintf+0xe4>
 6ae:	26 fd       	sbrc	r18, 6
 6b0:	5f c1       	rjmp	.+702    	; 0x970 <vfprintf+0x39e>
 6b2:	20 64       	ori	r18, 0x40	; 64
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <vfprintf+0xf0>
 6b6:	8c 36       	cpi	r24, 0x6C	; 108
 6b8:	11 f4       	brne	.+4      	; 0x6be <vfprintf+0xec>
 6ba:	20 68       	ori	r18, 0x80	; 128
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0xf0>
 6be:	88 36       	cpi	r24, 0x68	; 104
 6c0:	41 f4       	brne	.+16     	; 0x6d2 <vfprintf+0x100>
 6c2:	f6 01       	movw	r30, r12
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	6f 01       	movw	r12, r30
 6ce:	81 11       	cpse	r24, r1
 6d0:	c1 cf       	rjmp	.-126    	; 0x654 <vfprintf+0x82>
 6d2:	98 2f       	mov	r25, r24
 6d4:	9f 7d       	andi	r25, 0xDF	; 223
 6d6:	95 54       	subi	r25, 0x45	; 69
 6d8:	93 30       	cpi	r25, 0x03	; 3
 6da:	28 f4       	brcc	.+10     	; 0x6e6 <vfprintf+0x114>
 6dc:	0c 5f       	subi	r16, 0xFC	; 252
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	ff e3       	ldi	r31, 0x3F	; 63
 6e2:	f9 83       	std	Y+1, r31	; 0x01
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <vfprintf+0x12e>
 6e6:	83 36       	cpi	r24, 0x63	; 99
 6e8:	31 f0       	breq	.+12     	; 0x6f6 <vfprintf+0x124>
 6ea:	83 37       	cpi	r24, 0x73	; 115
 6ec:	71 f0       	breq	.+28     	; 0x70a <vfprintf+0x138>
 6ee:	83 35       	cpi	r24, 0x53	; 83
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <vfprintf+0x122>
 6f2:	57 c0       	rjmp	.+174    	; 0x7a2 <vfprintf+0x1d0>
 6f4:	21 c0       	rjmp	.+66     	; 0x738 <vfprintf+0x166>
 6f6:	f8 01       	movw	r30, r16
 6f8:	80 81       	ld	r24, Z
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	0e 5f       	subi	r16, 0xFE	; 254
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	44 24       	eor	r4, r4
 702:	43 94       	inc	r4
 704:	51 2c       	mov	r5, r1
 706:	54 01       	movw	r10, r8
 708:	14 c0       	rjmp	.+40     	; 0x732 <vfprintf+0x160>
 70a:	38 01       	movw	r6, r16
 70c:	f2 e0       	ldi	r31, 0x02	; 2
 70e:	6f 0e       	add	r6, r31
 710:	71 1c       	adc	r7, r1
 712:	f8 01       	movw	r30, r16
 714:	a0 80       	ld	r10, Z
 716:	b1 80       	ldd	r11, Z+1	; 0x01
 718:	26 ff       	sbrs	r18, 6
 71a:	03 c0       	rjmp	.+6      	; 0x722 <vfprintf+0x150>
 71c:	65 2d       	mov	r22, r5
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <vfprintf+0x154>
 722:	6f ef       	ldi	r22, 0xFF	; 255
 724:	7f ef       	ldi	r23, 0xFF	; 255
 726:	c5 01       	movw	r24, r10
 728:	2c 87       	std	Y+12, r18	; 0x0c
 72a:	4c d1       	rcall	.+664    	; 0x9c4 <strnlen>
 72c:	2c 01       	movw	r4, r24
 72e:	83 01       	movw	r16, r6
 730:	2c 85       	ldd	r18, Y+12	; 0x0c
 732:	2f 77       	andi	r18, 0x7F	; 127
 734:	22 2e       	mov	r2, r18
 736:	16 c0       	rjmp	.+44     	; 0x764 <vfprintf+0x192>
 738:	38 01       	movw	r6, r16
 73a:	f2 e0       	ldi	r31, 0x02	; 2
 73c:	6f 0e       	add	r6, r31
 73e:	71 1c       	adc	r7, r1
 740:	f8 01       	movw	r30, r16
 742:	a0 80       	ld	r10, Z
 744:	b1 80       	ldd	r11, Z+1	; 0x01
 746:	26 ff       	sbrs	r18, 6
 748:	03 c0       	rjmp	.+6      	; 0x750 <vfprintf+0x17e>
 74a:	65 2d       	mov	r22, r5
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x182>
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	7f ef       	ldi	r23, 0xFF	; 255
 754:	c5 01       	movw	r24, r10
 756:	2c 87       	std	Y+12, r18	; 0x0c
 758:	2a d1       	rcall	.+596    	; 0x9ae <strnlen_P>
 75a:	2c 01       	movw	r4, r24
 75c:	2c 85       	ldd	r18, Y+12	; 0x0c
 75e:	20 68       	ori	r18, 0x80	; 128
 760:	22 2e       	mov	r2, r18
 762:	83 01       	movw	r16, r6
 764:	23 fc       	sbrc	r2, 3
 766:	19 c0       	rjmp	.+50     	; 0x79a <vfprintf+0x1c8>
 768:	83 2d       	mov	r24, r3
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	48 16       	cp	r4, r24
 76e:	59 06       	cpc	r5, r25
 770:	a0 f4       	brcc	.+40     	; 0x79a <vfprintf+0x1c8>
 772:	b7 01       	movw	r22, r14
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	30 d1       	rcall	.+608    	; 0x9da <fputc>
 77a:	3a 94       	dec	r3
 77c:	f5 cf       	rjmp	.-22     	; 0x768 <vfprintf+0x196>
 77e:	f5 01       	movw	r30, r10
 780:	27 fc       	sbrc	r2, 7
 782:	85 91       	lpm	r24, Z+
 784:	27 fe       	sbrs	r2, 7
 786:	81 91       	ld	r24, Z+
 788:	5f 01       	movw	r10, r30
 78a:	b7 01       	movw	r22, r14
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	25 d1       	rcall	.+586    	; 0x9da <fputc>
 790:	31 10       	cpse	r3, r1
 792:	3a 94       	dec	r3
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	4f 1a       	sub	r4, r31
 798:	51 08       	sbc	r5, r1
 79a:	41 14       	cp	r4, r1
 79c:	51 04       	cpc	r5, r1
 79e:	79 f7       	brne	.-34     	; 0x77e <vfprintf+0x1ac>
 7a0:	de c0       	rjmp	.+444    	; 0x95e <vfprintf+0x38c>
 7a2:	84 36       	cpi	r24, 0x64	; 100
 7a4:	11 f0       	breq	.+4      	; 0x7aa <vfprintf+0x1d8>
 7a6:	89 36       	cpi	r24, 0x69	; 105
 7a8:	31 f5       	brne	.+76     	; 0x7f6 <vfprintf+0x224>
 7aa:	f8 01       	movw	r30, r16
 7ac:	27 ff       	sbrs	r18, 7
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <vfprintf+0x1ec>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	82 81       	ldd	r24, Z+2	; 0x02
 7b6:	93 81       	ldd	r25, Z+3	; 0x03
 7b8:	0c 5f       	subi	r16, 0xFC	; 252
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	08 c0       	rjmp	.+16     	; 0x7ce <vfprintf+0x1fc>
 7be:	60 81       	ld	r22, Z
 7c0:	71 81       	ldd	r23, Z+1	; 0x01
 7c2:	88 27       	eor	r24, r24
 7c4:	77 fd       	sbrc	r23, 7
 7c6:	80 95       	com	r24
 7c8:	98 2f       	mov	r25, r24
 7ca:	0e 5f       	subi	r16, 0xFE	; 254
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	2f 76       	andi	r18, 0x6F	; 111
 7d0:	b2 2e       	mov	r11, r18
 7d2:	97 ff       	sbrs	r25, 7
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x216>
 7d6:	90 95       	com	r25
 7d8:	80 95       	com	r24
 7da:	70 95       	com	r23
 7dc:	61 95       	neg	r22
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	20 68       	ori	r18, 0x80	; 128
 7e6:	b2 2e       	mov	r11, r18
 7e8:	2a e0       	ldi	r18, 0x0A	; 10
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	a4 01       	movw	r20, r8
 7ee:	27 d1       	rcall	.+590    	; 0xa3e <__ultoa_invert>
 7f0:	a8 2e       	mov	r10, r24
 7f2:	a8 18       	sub	r10, r8
 7f4:	43 c0       	rjmp	.+134    	; 0x87c <vfprintf+0x2aa>
 7f6:	85 37       	cpi	r24, 0x75	; 117
 7f8:	29 f4       	brne	.+10     	; 0x804 <vfprintf+0x232>
 7fa:	2f 7e       	andi	r18, 0xEF	; 239
 7fc:	b2 2e       	mov	r11, r18
 7fe:	2a e0       	ldi	r18, 0x0A	; 10
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	25 c0       	rjmp	.+74     	; 0x84e <vfprintf+0x27c>
 804:	f2 2f       	mov	r31, r18
 806:	f9 7f       	andi	r31, 0xF9	; 249
 808:	bf 2e       	mov	r11, r31
 80a:	8f 36       	cpi	r24, 0x6F	; 111
 80c:	c1 f0       	breq	.+48     	; 0x83e <vfprintf+0x26c>
 80e:	18 f4       	brcc	.+6      	; 0x816 <vfprintf+0x244>
 810:	88 35       	cpi	r24, 0x58	; 88
 812:	79 f0       	breq	.+30     	; 0x832 <vfprintf+0x260>
 814:	ad c0       	rjmp	.+346    	; 0x970 <vfprintf+0x39e>
 816:	80 37       	cpi	r24, 0x70	; 112
 818:	19 f0       	breq	.+6      	; 0x820 <vfprintf+0x24e>
 81a:	88 37       	cpi	r24, 0x78	; 120
 81c:	21 f0       	breq	.+8      	; 0x826 <vfprintf+0x254>
 81e:	a8 c0       	rjmp	.+336    	; 0x970 <vfprintf+0x39e>
 820:	2f 2f       	mov	r18, r31
 822:	20 61       	ori	r18, 0x10	; 16
 824:	b2 2e       	mov	r11, r18
 826:	b4 fe       	sbrs	r11, 4
 828:	0d c0       	rjmp	.+26     	; 0x844 <vfprintf+0x272>
 82a:	8b 2d       	mov	r24, r11
 82c:	84 60       	ori	r24, 0x04	; 4
 82e:	b8 2e       	mov	r11, r24
 830:	09 c0       	rjmp	.+18     	; 0x844 <vfprintf+0x272>
 832:	24 ff       	sbrs	r18, 4
 834:	0a c0       	rjmp	.+20     	; 0x84a <vfprintf+0x278>
 836:	9f 2f       	mov	r25, r31
 838:	96 60       	ori	r25, 0x06	; 6
 83a:	b9 2e       	mov	r11, r25
 83c:	06 c0       	rjmp	.+12     	; 0x84a <vfprintf+0x278>
 83e:	28 e0       	ldi	r18, 0x08	; 8
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	05 c0       	rjmp	.+10     	; 0x84e <vfprintf+0x27c>
 844:	20 e1       	ldi	r18, 0x10	; 16
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x27c>
 84a:	20 e1       	ldi	r18, 0x10	; 16
 84c:	32 e0       	ldi	r19, 0x02	; 2
 84e:	f8 01       	movw	r30, r16
 850:	b7 fe       	sbrs	r11, 7
 852:	07 c0       	rjmp	.+14     	; 0x862 <vfprintf+0x290>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	93 81       	ldd	r25, Z+3	; 0x03
 85c:	0c 5f       	subi	r16, 0xFC	; 252
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x29c>
 862:	60 81       	ld	r22, Z
 864:	71 81       	ldd	r23, Z+1	; 0x01
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 5f       	subi	r16, 0xFE	; 254
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	a4 01       	movw	r20, r8
 870:	e6 d0       	rcall	.+460    	; 0xa3e <__ultoa_invert>
 872:	a8 2e       	mov	r10, r24
 874:	a8 18       	sub	r10, r8
 876:	fb 2d       	mov	r31, r11
 878:	ff 77       	andi	r31, 0x7F	; 127
 87a:	bf 2e       	mov	r11, r31
 87c:	b6 fe       	sbrs	r11, 6
 87e:	0b c0       	rjmp	.+22     	; 0x896 <vfprintf+0x2c4>
 880:	2b 2d       	mov	r18, r11
 882:	2e 7f       	andi	r18, 0xFE	; 254
 884:	a5 14       	cp	r10, r5
 886:	50 f4       	brcc	.+20     	; 0x89c <vfprintf+0x2ca>
 888:	b4 fe       	sbrs	r11, 4
 88a:	0a c0       	rjmp	.+20     	; 0x8a0 <vfprintf+0x2ce>
 88c:	b2 fc       	sbrc	r11, 2
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <vfprintf+0x2ce>
 890:	2b 2d       	mov	r18, r11
 892:	2e 7e       	andi	r18, 0xEE	; 238
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <vfprintf+0x2ce>
 896:	7a 2c       	mov	r7, r10
 898:	2b 2d       	mov	r18, r11
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <vfprintf+0x2d0>
 89c:	7a 2c       	mov	r7, r10
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <vfprintf+0x2d0>
 8a0:	75 2c       	mov	r7, r5
 8a2:	24 ff       	sbrs	r18, 4
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <vfprintf+0x2ee>
 8a6:	fe 01       	movw	r30, r28
 8a8:	ea 0d       	add	r30, r10
 8aa:	f1 1d       	adc	r31, r1
 8ac:	80 81       	ld	r24, Z
 8ae:	80 33       	cpi	r24, 0x30	; 48
 8b0:	11 f4       	brne	.+4      	; 0x8b6 <vfprintf+0x2e4>
 8b2:	29 7e       	andi	r18, 0xE9	; 233
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x2f6>
 8b6:	22 ff       	sbrs	r18, 2
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <vfprintf+0x2f4>
 8ba:	73 94       	inc	r7
 8bc:	73 94       	inc	r7
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <vfprintf+0x2f6>
 8c0:	82 2f       	mov	r24, r18
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <vfprintf+0x2f6>
 8c6:	73 94       	inc	r7
 8c8:	23 fd       	sbrc	r18, 3
 8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <vfprintf+0x31e>
 8cc:	20 ff       	sbrs	r18, 0
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x30a>
 8d0:	5a 2c       	mov	r5, r10
 8d2:	73 14       	cp	r7, r3
 8d4:	18 f4       	brcc	.+6      	; 0x8dc <vfprintf+0x30a>
 8d6:	53 0c       	add	r5, r3
 8d8:	57 18       	sub	r5, r7
 8da:	73 2c       	mov	r7, r3
 8dc:	73 14       	cp	r7, r3
 8de:	60 f4       	brcc	.+24     	; 0x8f8 <vfprintf+0x326>
 8e0:	b7 01       	movw	r22, r14
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	2c 87       	std	Y+12, r18	; 0x0c
 8e8:	78 d0       	rcall	.+240    	; 0x9da <fputc>
 8ea:	73 94       	inc	r7
 8ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ee:	f6 cf       	rjmp	.-20     	; 0x8dc <vfprintf+0x30a>
 8f0:	73 14       	cp	r7, r3
 8f2:	10 f4       	brcc	.+4      	; 0x8f8 <vfprintf+0x326>
 8f4:	37 18       	sub	r3, r7
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <vfprintf+0x328>
 8f8:	31 2c       	mov	r3, r1
 8fa:	24 ff       	sbrs	r18, 4
 8fc:	11 c0       	rjmp	.+34     	; 0x920 <vfprintf+0x34e>
 8fe:	b7 01       	movw	r22, r14
 900:	80 e3       	ldi	r24, 0x30	; 48
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	2c 87       	std	Y+12, r18	; 0x0c
 906:	69 d0       	rcall	.+210    	; 0x9da <fputc>
 908:	2c 85       	ldd	r18, Y+12	; 0x0c
 90a:	22 ff       	sbrs	r18, 2
 90c:	16 c0       	rjmp	.+44     	; 0x93a <vfprintf+0x368>
 90e:	21 ff       	sbrs	r18, 1
 910:	03 c0       	rjmp	.+6      	; 0x918 <vfprintf+0x346>
 912:	88 e5       	ldi	r24, 0x58	; 88
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x34a>
 918:	88 e7       	ldi	r24, 0x78	; 120
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	b7 01       	movw	r22, r14
 91e:	0c c0       	rjmp	.+24     	; 0x938 <vfprintf+0x366>
 920:	82 2f       	mov	r24, r18
 922:	86 78       	andi	r24, 0x86	; 134
 924:	51 f0       	breq	.+20     	; 0x93a <vfprintf+0x368>
 926:	21 fd       	sbrc	r18, 1
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x35c>
 92a:	80 e2       	ldi	r24, 0x20	; 32
 92c:	01 c0       	rjmp	.+2      	; 0x930 <vfprintf+0x35e>
 92e:	8b e2       	ldi	r24, 0x2B	; 43
 930:	27 fd       	sbrc	r18, 7
 932:	8d e2       	ldi	r24, 0x2D	; 45
 934:	b7 01       	movw	r22, r14
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	50 d0       	rcall	.+160    	; 0x9da <fputc>
 93a:	a5 14       	cp	r10, r5
 93c:	30 f4       	brcc	.+12     	; 0x94a <vfprintf+0x378>
 93e:	b7 01       	movw	r22, r14
 940:	80 e3       	ldi	r24, 0x30	; 48
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	4a d0       	rcall	.+148    	; 0x9da <fputc>
 946:	5a 94       	dec	r5
 948:	f8 cf       	rjmp	.-16     	; 0x93a <vfprintf+0x368>
 94a:	aa 94       	dec	r10
 94c:	f4 01       	movw	r30, r8
 94e:	ea 0d       	add	r30, r10
 950:	f1 1d       	adc	r31, r1
 952:	80 81       	ld	r24, Z
 954:	b7 01       	movw	r22, r14
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	40 d0       	rcall	.+128    	; 0x9da <fputc>
 95a:	a1 10       	cpse	r10, r1
 95c:	f6 cf       	rjmp	.-20     	; 0x94a <vfprintf+0x378>
 95e:	33 20       	and	r3, r3
 960:	09 f4       	brne	.+2      	; 0x964 <vfprintf+0x392>
 962:	5d ce       	rjmp	.-838    	; 0x61e <vfprintf+0x4c>
 964:	b7 01       	movw	r22, r14
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	37 d0       	rcall	.+110    	; 0x9da <fputc>
 96c:	3a 94       	dec	r3
 96e:	f7 cf       	rjmp	.-18     	; 0x95e <vfprintf+0x38c>
 970:	f7 01       	movw	r30, r14
 972:	86 81       	ldd	r24, Z+6	; 0x06
 974:	97 81       	ldd	r25, Z+7	; 0x07
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x3aa>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	2c 96       	adiw	r28, 0x0c	; 12
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	de bf       	out	0x3e, r29	; 62
 984:	0f be       	out	0x3f, r0	; 63
 986:	cd bf       	out	0x3d, r28	; 61
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	ff 90       	pop	r15
 992:	ef 90       	pop	r14
 994:	df 90       	pop	r13
 996:	cf 90       	pop	r12
 998:	bf 90       	pop	r11
 99a:	af 90       	pop	r10
 99c:	9f 90       	pop	r9
 99e:	8f 90       	pop	r8
 9a0:	7f 90       	pop	r7
 9a2:	6f 90       	pop	r6
 9a4:	5f 90       	pop	r5
 9a6:	4f 90       	pop	r4
 9a8:	3f 90       	pop	r3
 9aa:	2f 90       	pop	r2
 9ac:	08 95       	ret

000009ae <strnlen_P>:
 9ae:	fc 01       	movw	r30, r24
 9b0:	05 90       	lpm	r0, Z+
 9b2:	61 50       	subi	r22, 0x01	; 1
 9b4:	70 40       	sbci	r23, 0x00	; 0
 9b6:	01 10       	cpse	r0, r1
 9b8:	d8 f7       	brcc	.-10     	; 0x9b0 <strnlen_P+0x2>
 9ba:	80 95       	com	r24
 9bc:	90 95       	com	r25
 9be:	8e 0f       	add	r24, r30
 9c0:	9f 1f       	adc	r25, r31
 9c2:	08 95       	ret

000009c4 <strnlen>:
 9c4:	fc 01       	movw	r30, r24
 9c6:	61 50       	subi	r22, 0x01	; 1
 9c8:	70 40       	sbci	r23, 0x00	; 0
 9ca:	01 90       	ld	r0, Z+
 9cc:	01 10       	cpse	r0, r1
 9ce:	d8 f7       	brcc	.-10     	; 0x9c6 <strnlen+0x2>
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	8e 0f       	add	r24, r30
 9d6:	9f 1f       	adc	r25, r31
 9d8:	08 95       	ret

000009da <fputc>:
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	18 2f       	mov	r17, r24
 9e4:	09 2f       	mov	r16, r25
 9e6:	eb 01       	movw	r28, r22
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	81 fd       	sbrc	r24, 1
 9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <fputc+0x1a>
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	20 c0       	rjmp	.+64     	; 0xa34 <fputc+0x5a>
 9f4:	82 ff       	sbrs	r24, 2
 9f6:	10 c0       	rjmp	.+32     	; 0xa18 <fputc+0x3e>
 9f8:	4e 81       	ldd	r20, Y+6	; 0x06
 9fa:	5f 81       	ldd	r21, Y+7	; 0x07
 9fc:	2c 81       	ldd	r18, Y+4	; 0x04
 9fe:	3d 81       	ldd	r19, Y+5	; 0x05
 a00:	42 17       	cp	r20, r18
 a02:	53 07       	cpc	r21, r19
 a04:	7c f4       	brge	.+30     	; 0xa24 <fputc+0x4a>
 a06:	e8 81       	ld	r30, Y
 a08:	f9 81       	ldd	r31, Y+1	; 0x01
 a0a:	9f 01       	movw	r18, r30
 a0c:	2f 5f       	subi	r18, 0xFF	; 255
 a0e:	3f 4f       	sbci	r19, 0xFF	; 255
 a10:	39 83       	std	Y+1, r19	; 0x01
 a12:	28 83       	st	Y, r18
 a14:	10 83       	st	Z, r17
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <fputc+0x4a>
 a18:	e8 85       	ldd	r30, Y+8	; 0x08
 a1a:	f9 85       	ldd	r31, Y+9	; 0x09
 a1c:	81 2f       	mov	r24, r17
 a1e:	09 95       	icall
 a20:	89 2b       	or	r24, r25
 a22:	29 f7       	brne	.-54     	; 0x9ee <fputc+0x14>
 a24:	2e 81       	ldd	r18, Y+6	; 0x06
 a26:	3f 81       	ldd	r19, Y+7	; 0x07
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	3f 83       	std	Y+7, r19	; 0x07
 a2e:	2e 83       	std	Y+6, r18	; 0x06
 a30:	81 2f       	mov	r24, r17
 a32:	90 2f       	mov	r25, r16
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	08 95       	ret

00000a3e <__ultoa_invert>:
 a3e:	fa 01       	movw	r30, r20
 a40:	aa 27       	eor	r26, r26
 a42:	28 30       	cpi	r18, 0x08	; 8
 a44:	51 f1       	breq	.+84     	; 0xa9a <__ultoa_invert+0x5c>
 a46:	20 31       	cpi	r18, 0x10	; 16
 a48:	81 f1       	breq	.+96     	; 0xaaa <__ultoa_invert+0x6c>
 a4a:	e8 94       	clt
 a4c:	6f 93       	push	r22
 a4e:	6e 7f       	andi	r22, 0xFE	; 254
 a50:	6e 5f       	subi	r22, 0xFE	; 254
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	af 4f       	sbci	r26, 0xFF	; 255
 a5a:	b1 e0       	ldi	r27, 0x01	; 1
 a5c:	3e d0       	rcall	.+124    	; 0xada <__ultoa_invert+0x9c>
 a5e:	b4 e0       	ldi	r27, 0x04	; 4
 a60:	3c d0       	rcall	.+120    	; 0xada <__ultoa_invert+0x9c>
 a62:	67 0f       	add	r22, r23
 a64:	78 1f       	adc	r23, r24
 a66:	89 1f       	adc	r24, r25
 a68:	9a 1f       	adc	r25, r26
 a6a:	a1 1d       	adc	r26, r1
 a6c:	68 0f       	add	r22, r24
 a6e:	79 1f       	adc	r23, r25
 a70:	8a 1f       	adc	r24, r26
 a72:	91 1d       	adc	r25, r1
 a74:	a1 1d       	adc	r26, r1
 a76:	6a 0f       	add	r22, r26
 a78:	71 1d       	adc	r23, r1
 a7a:	81 1d       	adc	r24, r1
 a7c:	91 1d       	adc	r25, r1
 a7e:	a1 1d       	adc	r26, r1
 a80:	20 d0       	rcall	.+64     	; 0xac2 <__ultoa_invert+0x84>
 a82:	09 f4       	brne	.+2      	; 0xa86 <__ultoa_invert+0x48>
 a84:	68 94       	set
 a86:	3f 91       	pop	r19
 a88:	2a e0       	ldi	r18, 0x0A	; 10
 a8a:	26 9f       	mul	r18, r22
 a8c:	11 24       	eor	r1, r1
 a8e:	30 19       	sub	r19, r0
 a90:	30 5d       	subi	r19, 0xD0	; 208
 a92:	31 93       	st	Z+, r19
 a94:	de f6       	brtc	.-74     	; 0xa4c <__ultoa_invert+0xe>
 a96:	cf 01       	movw	r24, r30
 a98:	08 95       	ret
 a9a:	46 2f       	mov	r20, r22
 a9c:	47 70       	andi	r20, 0x07	; 7
 a9e:	40 5d       	subi	r20, 0xD0	; 208
 aa0:	41 93       	st	Z+, r20
 aa2:	b3 e0       	ldi	r27, 0x03	; 3
 aa4:	0f d0       	rcall	.+30     	; 0xac4 <__ultoa_invert+0x86>
 aa6:	c9 f7       	brne	.-14     	; 0xa9a <__ultoa_invert+0x5c>
 aa8:	f6 cf       	rjmp	.-20     	; 0xa96 <__ultoa_invert+0x58>
 aaa:	46 2f       	mov	r20, r22
 aac:	4f 70       	andi	r20, 0x0F	; 15
 aae:	40 5d       	subi	r20, 0xD0	; 208
 ab0:	4a 33       	cpi	r20, 0x3A	; 58
 ab2:	18 f0       	brcs	.+6      	; 0xaba <__ultoa_invert+0x7c>
 ab4:	49 5d       	subi	r20, 0xD9	; 217
 ab6:	31 fd       	sbrc	r19, 1
 ab8:	40 52       	subi	r20, 0x20	; 32
 aba:	41 93       	st	Z+, r20
 abc:	02 d0       	rcall	.+4      	; 0xac2 <__ultoa_invert+0x84>
 abe:	a9 f7       	brne	.-22     	; 0xaaa <__ultoa_invert+0x6c>
 ac0:	ea cf       	rjmp	.-44     	; 0xa96 <__ultoa_invert+0x58>
 ac2:	b4 e0       	ldi	r27, 0x04	; 4
 ac4:	a6 95       	lsr	r26
 ac6:	97 95       	ror	r25
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	ba 95       	dec	r27
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__ultoa_invert+0x86>
 ad2:	00 97       	sbiw	r24, 0x00	; 0
 ad4:	61 05       	cpc	r22, r1
 ad6:	71 05       	cpc	r23, r1
 ad8:	08 95       	ret
 ada:	9b 01       	movw	r18, r22
 adc:	ac 01       	movw	r20, r24
 ade:	0a 2e       	mov	r0, r26
 ae0:	06 94       	lsr	r0
 ae2:	57 95       	ror	r21
 ae4:	47 95       	ror	r20
 ae6:	37 95       	ror	r19
 ae8:	27 95       	ror	r18
 aea:	ba 95       	dec	r27
 aec:	c9 f7       	brne	.-14     	; 0xae0 <__ultoa_invert+0xa2>
 aee:	62 0f       	add	r22, r18
 af0:	73 1f       	adc	r23, r19
 af2:	84 1f       	adc	r24, r20
 af4:	95 1f       	adc	r25, r21
 af6:	a0 1d       	adc	r26, r0
 af8:	08 95       	ret

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>

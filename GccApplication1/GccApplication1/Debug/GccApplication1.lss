
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000972  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  00000a18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca3  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  0000288f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cc3  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ec  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cfa  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000533e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	45 c3       	rjmp	.+1674   	; 0x6b0 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	54 c4       	rjmp	.+2216   	; 0x96e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "open_interface.h"
#include "lcd.h"
#include "movement.h"

int main(void)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	lcd_init();
  d0:	60 d0       	rcall	.+192    	; 0x192 <lcd_init>
	lcd_puts("AYYYY TONY");
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	a5 d0       	rcall	.+330    	; 0x222 <lcd_puts>
    oi_t *sensor_data = oi_alloc();
  d8:	89 d1       	rcall	.+786    	; 0x3ec <oi_alloc>
  da:	ec 01       	movw	r28, r24
    oi_init(sensor_data);
  dc:	8b d2       	rcall	.+1302   	; 0x5f4 <oi_init>
    }
    oi_set_wheels(0, 0); // stop

    oi_free(sensor_data);*/
	//int i = 0;
	int dist = 0;
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	10 e0       	ldi	r17, 0x00	; 0
	while(dist < 2000) {
		oi_set_wheels(300, 300);
  e2:	6c e2       	ldi	r22, 0x2C	; 44
  e4:	71 e0       	ldi	r23, 0x01	; 1
  e6:	8c e2       	ldi	r24, 0x2C	; 44
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	aa d1       	rcall	.+852    	; 0x440 <oi_set_wheels>
		oi_update(sensor_data);
  ec:	ce 01       	movw	r24, r28
  ee:	c7 d1       	rcall	.+910    	; 0x47e <oi_update>
		dist += sensor_data->distance;
  f0:	8c 85       	ldd	r24, Y+12	; 0x0c
  f2:	9d 85       	ldd	r25, Y+13	; 0x0d
  f4:	08 0f       	add	r16, r24
  f6:	19 1f       	adc	r17, r25
		
		if(sensor_data->bumper_left){
  f8:	88 81       	ld	r24, Y
  fa:	81 ff       	sbrs	r24, 1
  fc:	0d c0       	rjmp	.+26     	; 0x118 <main+0x50>
			oi_update(sensor_data);
  fe:	ce 01       	movw	r24, r28
 100:	be d1       	rcall	.+892    	; 0x47e <oi_update>
			dist += sensor_data->distance;
 102:	8c 85       	ldd	r24, Y+12	; 0x0c
 104:	9d 85       	ldd	r25, Y+13	; 0x0d
 106:	08 0f       	add	r16, r24
 108:	19 1f       	adc	r17, r25
			dist += -15;
 10a:	0f 50       	subi	r16, 0x0F	; 15
 10c:	11 09       	sbc	r17, r1
			
			bump(sensor_data, 1);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	ce 01       	movw	r24, r28
 114:	32 d1       	rcall	.+612    	; 0x37a <bump>
 116:	0e c0       	rjmp	.+28     	; 0x134 <main+0x6c>
		}
		else if(sensor_data->bumper_right){
 118:	80 ff       	sbrs	r24, 0
 11a:	0c c0       	rjmp	.+24     	; 0x134 <main+0x6c>
			oi_update(sensor_data);
 11c:	ce 01       	movw	r24, r28
 11e:	af d1       	rcall	.+862    	; 0x47e <oi_update>
			dist += sensor_data->distance;
 120:	8c 85       	ldd	r24, Y+12	; 0x0c
 122:	9d 85       	ldd	r25, Y+13	; 0x0d
 124:	08 0f       	add	r16, r24
 126:	19 1f       	adc	r17, r25
			dist += -15;
 128:	0f 50       	subi	r16, 0x0F	; 15
 12a:	11 09       	sbc	r17, r1
			bump(sensor_data, 2);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	ce 01       	movw	r24, r28
 132:	23 d1       	rcall	.+582    	; 0x37a <bump>
    oi_set_wheels(0, 0); // stop

    oi_free(sensor_data);*/
	//int i = 0;
	int dist = 0;
	while(dist < 2000) {
 134:	00 3d       	cpi	r16, 0xD0	; 208
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	18 07       	cpc	r17, r24
 13a:	9c f2       	brlt	.-90     	; 0xe2 <main+0x1a>
			dist += sensor_data->distance;
			dist += -15;
			bump(sensor_data, 2);
		}
	}
	oi_set_wheels(0,0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	7d d1       	rcall	.+762    	; 0x440 <oi_set_wheels>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <lcd_toggle_clear>:



/// Shift display content left
void lcd_display_shift_left(void) {
	lcd_command(HD_DISPLAY_SHIFT_LEFT);
 154:	de 9a       	sbi	0x1b, 6	; 27
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	95 d2       	rcall	.+1322   	; 0x684 <wait_ms>
 15a:	de 98       	cbi	0x1b, 6	; 27
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	8b bb       	out	0x1b, r24	; 27
 162:	08 95       	ret

00000164 <lcd_command>:
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
 168:	dc 98       	cbi	0x1b, 4	; 27
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	9c 2f       	mov	r25, r28
 16e:	92 95       	swap	r25
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	89 2b       	or	r24, r25
 174:	8b bb       	out	0x1b, r24	; 27
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	ed df       	rcall	.-38     	; 0x154 <lcd_toggle_clear>
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	cf 70       	andi	r28, 0x0F	; 15
 17e:	c8 2b       	or	r28, r24
 180:	cb bb       	out	0x1b, r28	; 27
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	e7 df       	rcall	.-50     	; 0x154 <lcd_toggle_clear>
 186:	dc 9a       	sbi	0x1b, 4	; 27
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_home_line1>:
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	ea cf       	rjmp	.-44     	; 0x164 <lcd_command>
 190:	08 95       	ret

00000192 <lcd_init>:
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8a bb       	out	0x1a, r24	; 26
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	de 9a       	sbi	0x1b, 6	; 27
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	71 d2       	rcall	.+1250   	; 0x684 <wait_ms>
 1a2:	de 98       	cbi	0x1b, 6	; 27
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	6d d2       	rcall	.+1242   	; 0x684 <wait_ms>
 1aa:	de 9a       	sbi	0x1b, 6	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	69 d2       	rcall	.+1234   	; 0x684 <wait_ms>
 1b2:	de 98       	cbi	0x1b, 6	; 27
 1b4:	de 9a       	sbi	0x1b, 6	; 27
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	64 d2       	rcall	.+1224   	; 0x684 <wait_ms>
 1bc:	de 98       	cbi	0x1b, 6	; 27
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	c7 df       	rcall	.-114    	; 0x154 <lcd_toggle_clear>
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	8b bb       	out	0x1b, r24	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	c3 df       	rcall	.-122    	; 0x154 <lcd_toggle_clear>
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	8e 60       	ori	r24, 0x0E	; 14
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	be df       	rcall	.-132    	; 0x154 <lcd_toggle_clear>
 1d8:	8b b3       	in	r24, 0x1b	; 27
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	ba df       	rcall	.-140    	; 0x154 <lcd_toggle_clear>
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	86 60       	ori	r24, 0x06	; 6
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	b5 df       	rcall	.-150    	; 0x154 <lcd_toggle_clear>
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	b1 df       	rcall	.-158    	; 0x154 <lcd_toggle_clear>
 1f2:	d8 9a       	sbi	0x1b, 0	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	ae df       	rcall	.-164    	; 0x154 <lcd_toggle_clear>
 1f8:	dc 9a       	sbi	0x1b, 4	; 27
 1fa:	c8 cf       	rjmp	.-112    	; 0x18c <lcd_home_line1>
 1fc:	08 95       	ret

000001fe <lcd_putc>:
}



/// Prints one character at the current cursor position
void lcd_putc(char data) {
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
	PORTA|=(data>>4);
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	9c 2f       	mov	r25, r28
 206:	92 95       	swap	r25
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	89 2b       	or	r24, r25
 20c:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	a1 df       	rcall	.-190    	; 0x154 <lcd_toggle_clear>
	PORTA|=(data & 0x0F);
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	cf 70       	andi	r28, 0x0F	; 15
 216:	c8 2b       	or	r28, r24
 218:	cb bb       	out	0x1b, r28	; 27
	lcd_toggle_clear(1);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	9b df       	rcall	.-202    	; 0x154 <lcd_toggle_clear>
}
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <lcd_puts>:
}



/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	int size=strlen(string);
 22e:	fc 01       	movw	r30, r24
 230:	01 90       	ld	r0, Z+
 232:	00 20       	and	r0, r0
 234:	e9 f7       	brne	.-6      	; 0x230 <lcd_puts+0xe>
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	7f 01       	movw	r14, r30
 23a:	e8 1a       	sub	r14, r24
 23c:	f9 0a       	sbc	r15, r25
	int i;

	for (i=0;i<size;i++) {		
 23e:	1e 14       	cp	r1, r14
 240:	1f 04       	cpc	r1, r15
 242:	5c f4       	brge	.+22     	; 0x25a <lcd_puts+0x38>
 244:	8c 01       	movw	r16, r24
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_putc(string[i]);
 24a:	f8 01       	movw	r30, r16
 24c:	81 91       	ld	r24, Z+
 24e:	8f 01       	movw	r16, r30
 250:	d6 df       	rcall	.-84     	; 0x1fe <lcd_putc>
/// Prints string to lcd, starting at the current cursor position
void lcd_puts(char * string) {
	int size=strlen(string);
	int i;

	for (i=0;i<size;i++) {		
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	ec 16       	cp	r14, r28
 256:	fd 06       	cpc	r15, r29
 258:	c1 f7       	brne	.-16     	; 0x24a <lcd_puts+0x28>
		lcd_putc(string[i]);
	}
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

00000268 <move>:
#include <stdio.h>
#include <stdlib.h>
#include "open_interface.h"

void move(oi_t *sensor, int millimeters) {
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	8c 01       	movw	r16, r24
 276:	7b 01       	movw	r14, r22
		int sum = 0;
		if(millimeters < 0) {
 278:	77 23       	and	r23, r23
 27a:	bc f4       	brge	.+46     	; 0x2aa <move+0x42>
			oi_set_wheels(-300, -300);
 27c:	64 ed       	ldi	r22, 0xD4	; 212
 27e:	7e ef       	ldi	r23, 0xFE	; 254
 280:	84 ed       	ldi	r24, 0xD4	; 212
 282:	9e ef       	ldi	r25, 0xFE	; 254
 284:	dd d0       	rcall	.+442    	; 0x440 <oi_set_wheels>
#include <stdio.h>
#include <stdlib.h>
#include "open_interface.h"

void move(oi_t *sensor, int millimeters) {
		int sum = 0;
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
		if(millimeters < 0) {
			oi_set_wheels(-300, -300);
			while (sum > millimeters) {
				oi_update(sensor);
 28a:	c8 01       	movw	r24, r16
 28c:	f8 d0       	rcall	.+496    	; 0x47e <oi_update>
				sum += sensor->distance;
 28e:	f8 01       	movw	r30, r16
 290:	84 85       	ldd	r24, Z+12	; 0x0c
 292:	95 85       	ldd	r25, Z+13	; 0x0d
 294:	c8 0f       	add	r28, r24
 296:	d9 1f       	adc	r29, r25

void move(oi_t *sensor, int millimeters) {
		int sum = 0;
		if(millimeters < 0) {
			oi_set_wheels(-300, -300);
			while (sum > millimeters) {
 298:	ec 16       	cp	r14, r28
 29a:	fd 06       	cpc	r15, r29
 29c:	b4 f3       	brlt	.-20     	; 0x28a <move+0x22>
				oi_update(sensor);
				sum += sensor->distance;
			}
				
			oi_set_wheels(0, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	cc d0       	rcall	.+408    	; 0x440 <oi_set_wheels>
 2a8:	19 c0       	rjmp	.+50     	; 0x2dc <move+0x74>
			}
		else {
			oi_set_wheels(300,300);
 2aa:	6c e2       	ldi	r22, 0x2C	; 44
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	8c e2       	ldi	r24, 0x2C	; 44
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	c6 d0       	rcall	.+396    	; 0x440 <oi_set_wheels>
			while (sum < millimeters){//minus 5 degree for calibration {
 2b4:	1e 14       	cp	r1, r14
 2b6:	1f 04       	cpc	r1, r15
 2b8:	64 f4       	brge	.+24     	; 0x2d2 <move+0x6a>
#include <stdio.h>
#include <stdlib.h>
#include "open_interface.h"

void move(oi_t *sensor, int millimeters) {
		int sum = 0;
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
			oi_set_wheels(0, 0);
			}
		else {
			oi_set_wheels(300,300);
			while (sum < millimeters){//minus 5 degree for calibration {
				oi_update(sensor);
 2be:	c8 01       	movw	r24, r16
 2c0:	de d0       	rcall	.+444    	; 0x47e <oi_update>
				sum += sensor->distance;
 2c2:	f8 01       	movw	r30, r16
 2c4:	84 85       	ldd	r24, Z+12	; 0x0c
 2c6:	95 85       	ldd	r25, Z+13	; 0x0d
 2c8:	c8 0f       	add	r28, r24
 2ca:	d9 1f       	adc	r29, r25
				
			oi_set_wheels(0, 0);
			}
		else {
			oi_set_wheels(300,300);
			while (sum < millimeters){//minus 5 degree for calibration {
 2cc:	ce 15       	cp	r28, r14
 2ce:	df 05       	cpc	r29, r15
 2d0:	b4 f3       	brlt	.-20     	; 0x2be <move+0x56>
				oi_update(sensor);
				sum += sensor->distance;
			}
				
			oi_set_wheels(0, 0);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	b2 d0       	rcall	.+356    	; 0x440 <oi_set_wheels>
			}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	08 95       	ret

000002ea <turn>:

void turn(oi_t *sensor, int degrees) {
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
 2f8:	7b 01       	movw	r14, r22
	int sum = 0;
	if(degrees < 0) {
 2fa:	77 23       	and	r23, r23
 2fc:	dc f4       	brge	.+54     	; 0x334 <turn+0x4a>
		oi_set_wheels(-100, 100);
 2fe:	64 e6       	ldi	r22, 0x64	; 100
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	8c e9       	ldi	r24, 0x9C	; 156
 304:	9f ef       	ldi	r25, 0xFF	; 255
 306:	9c d0       	rcall	.+312    	; 0x440 <oi_set_wheels>
		while (sum > (degrees+6)) {
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	e8 0e       	add	r14, r24
 30c:	f1 1c       	adc	r15, r1
 30e:	62 f4       	brpl	.+24     	; 0x328 <turn+0x3e>
			oi_set_wheels(0, 0);
			}
}

void turn(oi_t *sensor, int degrees) {
	int sum = 0;
 310:	c0 e0       	ldi	r28, 0x00	; 0
 312:	d0 e0       	ldi	r29, 0x00	; 0
	if(degrees < 0) {
		oi_set_wheels(-100, 100);
		while (sum > (degrees+6)) {
			oi_update(sensor);
 314:	c8 01       	movw	r24, r16
 316:	b3 d0       	rcall	.+358    	; 0x47e <oi_update>
			sum += sensor->angle;
 318:	f8 01       	movw	r30, r16
 31a:	86 85       	ldd	r24, Z+14	; 0x0e
 31c:	97 85       	ldd	r25, Z+15	; 0x0f
 31e:	c8 0f       	add	r28, r24
 320:	d9 1f       	adc	r29, r25

void turn(oi_t *sensor, int degrees) {
	int sum = 0;
	if(degrees < 0) {
		oi_set_wheels(-100, 100);
		while (sum > (degrees+6)) {
 322:	ec 16       	cp	r14, r28
 324:	fd 06       	cpc	r15, r29
 326:	b4 f3       	brlt	.-20     	; 0x314 <turn+0x2a>
			oi_update(sensor);
			sum += sensor->angle;
		}
			
		oi_set_wheels(0, 0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	87 d0       	rcall	.+270    	; 0x440 <oi_set_wheels>
 332:	1c c0       	rjmp	.+56     	; 0x36c <turn+0x82>
	}
	else {
		oi_set_wheels(100,-100);
 334:	6c e9       	ldi	r22, 0x9C	; 156
 336:	7f ef       	ldi	r23, 0xFF	; 255
 338:	84 e6       	ldi	r24, 0x64	; 100
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	81 d0       	rcall	.+258    	; 0x440 <oi_set_wheels>
		while (sum < (degrees-6)){//minus 5 degree for calibration {
 33e:	f6 e0       	ldi	r31, 0x06	; 6
 340:	ef 1a       	sub	r14, r31
 342:	f1 08       	sbc	r15, r1
 344:	1e 14       	cp	r1, r14
 346:	1f 04       	cpc	r1, r15
 348:	64 f4       	brge	.+24     	; 0x362 <turn+0x78>
			oi_set_wheels(0, 0);
			}
}

void turn(oi_t *sensor, int degrees) {
	int sum = 0;
 34a:	c0 e0       	ldi	r28, 0x00	; 0
 34c:	d0 e0       	ldi	r29, 0x00	; 0
		oi_set_wheels(0, 0);
	}
	else {
		oi_set_wheels(100,-100);
		while (sum < (degrees-6)){//minus 5 degree for calibration {
			oi_update(sensor);
 34e:	c8 01       	movw	r24, r16
 350:	96 d0       	rcall	.+300    	; 0x47e <oi_update>
			sum += sensor->angle;
 352:	f8 01       	movw	r30, r16
 354:	86 85       	ldd	r24, Z+14	; 0x0e
 356:	97 85       	ldd	r25, Z+15	; 0x0f
 358:	c8 0f       	add	r28, r24
 35a:	d9 1f       	adc	r29, r25
			
		oi_set_wheels(0, 0);
	}
	else {
		oi_set_wheels(100,-100);
		while (sum < (degrees-6)){//minus 5 degree for calibration {
 35c:	ce 15       	cp	r28, r14
 35e:	df 05       	cpc	r29, r15
 360:	b4 f3       	brlt	.-20     	; 0x34e <turn+0x64>
			oi_update(sensor);
			sum += sensor->angle;
		}
		
		oi_set_wheels(0, 0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	6a d0       	rcall	.+212    	; 0x440 <oi_set_wheels>
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	08 95       	ret

0000037a <bump>:

void bump(oi_t* sensor, int direction) {
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
 384:	8b 01       	movw	r16, r22
	oi_set_wheels(0,0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	58 d0       	rcall	.+176    	; 0x440 <oi_set_wheels>
	if(direction == 1){
 390:	01 30       	cpi	r16, 0x01	; 1
 392:	11 05       	cpc	r17, r1
 394:	89 f4       	brne	.+34     	; 0x3b8 <bump+0x3e>
		move(sensor, -15);
 396:	61 ef       	ldi	r22, 0xF1	; 241
 398:	7f ef       	ldi	r23, 0xFF	; 255
 39a:	ce 01       	movw	r24, r28
 39c:	65 df       	rcall	.-310    	; 0x268 <move>
		turn(sensor,-90);
 39e:	66 ea       	ldi	r22, 0xA6	; 166
 3a0:	7f ef       	ldi	r23, 0xFF	; 255
 3a2:	ce 01       	movw	r24, r28
 3a4:	a2 df       	rcall	.-188    	; 0x2ea <turn>
		move(sensor, 100);
 3a6:	64 e6       	ldi	r22, 0x64	; 100
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	ce 01       	movw	r24, r28
 3ac:	5d df       	rcall	.-326    	; 0x268 <move>
		turn(sensor,90);
 3ae:	6a e5       	ldi	r22, 0x5A	; 90
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	ce 01       	movw	r24, r28
 3b4:	9a df       	rcall	.-204    	; 0x2ea <turn>
 3b6:	13 c0       	rjmp	.+38     	; 0x3de <bump+0x64>
		
	}
	else if(direction ==2){
 3b8:	02 30       	cpi	r16, 0x02	; 2
 3ba:	11 05       	cpc	r17, r1
 3bc:	81 f4       	brne	.+32     	; 0x3de <bump+0x64>
		move(sensor, -15);
 3be:	61 ef       	ldi	r22, 0xF1	; 241
 3c0:	7f ef       	ldi	r23, 0xFF	; 255
 3c2:	ce 01       	movw	r24, r28
 3c4:	51 df       	rcall	.-350    	; 0x268 <move>
		turn(sensor,90);
 3c6:	6a e5       	ldi	r22, 0x5A	; 90
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	ce 01       	movw	r24, r28
 3cc:	8e df       	rcall	.-228    	; 0x2ea <turn>
		move(sensor, 100);
 3ce:	64 e6       	ldi	r22, 0x64	; 100
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	ce 01       	movw	r24, r28
 3d4:	49 df       	rcall	.-366    	; 0x268 <move>
		turn(sensor,-90);
 3d6:	66 ea       	ldi	r22, 0xA6	; 166
 3d8:	7f ef       	ldi	r23, 0xFF	; 255
 3da:	ce 01       	movw	r24, r28
 3dc:	86 df       	rcall	.-244    	; 0x2ea <turn>
	}
	oi_update(sensor);
 3de:	ce 01       	movw	r24, r28
 3e0:	4e d0       	rcall	.+156    	; 0x47e <oi_update>
		
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
 3ec:	64 e3       	ldi	r22, 0x34	; 52
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	74 c1       	rjmp	.+744    	; 0x6de <calloc>
 3f6:	08 95       	ret

000003f8 <oi_byte_tx>:
 3f8:	eb e9       	ldi	r30, 0x9B	; 155
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	90 81       	ld	r25, Z
 3fe:	95 ff       	sbrs	r25, 5
 400:	fd cf       	rjmp	.-6      	; 0x3fc <oi_byte_tx+0x4>
 402:	80 93 9c 00 	sts	0x009C, r24
 406:	08 95       	ret

00000408 <oi_set_leds>:
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	08 2f       	mov	r16, r24
 412:	16 2f       	mov	r17, r22
 414:	d4 2f       	mov	r29, r20
 416:	c2 2f       	mov	r28, r18
 418:	8b e8       	ldi	r24, 0x8B	; 139
 41a:	ee df       	rcall	.-36     	; 0x3f8 <oi_byte_tx>
 41c:	11 23       	and	r17, r17
 41e:	29 f0       	breq	.+10     	; 0x42a <oi_set_leds+0x22>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	01 11       	cpse	r16, r1
 424:	03 c0       	rjmp	.+6      	; 0x42c <oi_set_leds+0x24>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	01 c0       	rjmp	.+2      	; 0x42c <oi_set_leds+0x24>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	e5 df       	rcall	.-54     	; 0x3f8 <oi_byte_tx>
 42e:	8d 2f       	mov	r24, r29
 430:	e3 df       	rcall	.-58     	; 0x3f8 <oi_byte_tx>
 432:	8c 2f       	mov	r24, r28
 434:	e1 df       	rcall	.-62     	; 0x3f8 <oi_byte_tx>
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	08 95       	ret

00000440 <oi_set_wheels>:
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	18 2f       	mov	r17, r24
 44a:	09 2f       	mov	r16, r25
 44c:	c6 2f       	mov	r28, r22
 44e:	d7 2f       	mov	r29, r23
 450:	81 e9       	ldi	r24, 0x91	; 145
 452:	d2 df       	rcall	.-92     	; 0x3f8 <oi_byte_tx>
 454:	80 2f       	mov	r24, r16
 456:	d0 df       	rcall	.-96     	; 0x3f8 <oi_byte_tx>
 458:	81 2f       	mov	r24, r17
 45a:	ce df       	rcall	.-100    	; 0x3f8 <oi_byte_tx>
 45c:	8d 2f       	mov	r24, r29
 45e:	cc df       	rcall	.-104    	; 0x3f8 <oi_byte_tx>
 460:	8c 2f       	mov	r24, r28
 462:	ca df       	rcall	.-108    	; 0x3f8 <oi_byte_tx>
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
 46e:	eb e9       	ldi	r30, 0x9B	; 155
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	88 23       	and	r24, r24
 476:	ec f7       	brge	.-6      	; 0x472 <oi_byte_rx+0x4>

	return UDR1;
 478:	80 91 9c 00 	lds	r24, 0x009C
}
 47c:	08 95       	ret

0000047e <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 48c:	80 91 9b 00 	lds	r24, 0x009B
 490:	88 23       	and	r24, r24
 492:	44 f4       	brge	.+16     	; 0x4a4 <oi_update+0x26>
		i = UDR1;
 494:	ac e9       	ldi	r26, 0x9C	; 156
 496:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 498:	eb e9       	ldi	r30, 0x9B	; 155
 49a:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
 49c:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 49e:	80 81       	ld	r24, Z
 4a0:	88 23       	and	r24, r24
 4a2:	e4 f3       	brlt	.-8      	; 0x49c <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
 4a4:	8e e8       	ldi	r24, 0x8E	; 142
 4a6:	a8 df       	rcall	.-176    	; 0x3f8 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	a6 df       	rcall	.-180    	; 0x3f8 <oi_byte_tx>
 4ac:	e7 01       	movw	r28, r14
 4ae:	87 01       	movw	r16, r14
 4b0:	0c 5c       	subi	r16, 0xCC	; 204
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
 4b4:	dc df       	rcall	.-72     	; 0x46e <oi_byte_rx>
 4b6:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
 4b8:	c0 17       	cp	r28, r16
 4ba:	d1 07       	cpc	r29, r17
 4bc:	d9 f7       	brne	.-10     	; 0x4b4 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
 4be:	f7 01       	movw	r30, r14
 4c0:	84 85       	ldd	r24, Z+12	; 0x0c
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	98 2f       	mov	r25, r24
 4c6:	88 27       	eor	r24, r24
 4c8:	25 85       	ldd	r18, Z+13	; 0x0d
 4ca:	82 0f       	add	r24, r18
 4cc:	91 1d       	adc	r25, r1
 4ce:	95 87       	std	Z+13, r25	; 0x0d
 4d0:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
 4d2:	86 85       	ldd	r24, Z+14	; 0x0e
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	98 2f       	mov	r25, r24
 4d8:	88 27       	eor	r24, r24
 4da:	27 85       	ldd	r18, Z+15	; 0x0f
 4dc:	82 0f       	add	r24, r18
 4de:	91 1d       	adc	r25, r1
 4e0:	97 87       	std	Z+15, r25	; 0x0f
 4e2:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
 4e4:	81 89       	ldd	r24, Z+17	; 0x11
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	98 2f       	mov	r25, r24
 4ea:	88 27       	eor	r24, r24
 4ec:	22 89       	ldd	r18, Z+18	; 0x12
 4ee:	82 0f       	add	r24, r18
 4f0:	91 1d       	adc	r25, r1
 4f2:	92 8b       	std	Z+18, r25	; 0x12
 4f4:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
 4f6:	83 89       	ldd	r24, Z+19	; 0x13
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	98 2f       	mov	r25, r24
 4fc:	88 27       	eor	r24, r24
 4fe:	24 89       	ldd	r18, Z+20	; 0x14
 500:	82 0f       	add	r24, r18
 502:	91 1d       	adc	r25, r1
 504:	94 8b       	std	Z+20, r25	; 0x14
 506:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
 508:	86 89       	ldd	r24, Z+22	; 0x16
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	98 2f       	mov	r25, r24
 50e:	88 27       	eor	r24, r24
 510:	27 89       	ldd	r18, Z+23	; 0x17
 512:	82 0f       	add	r24, r18
 514:	91 1d       	adc	r25, r1
 516:	97 8b       	std	Z+23, r25	; 0x17
 518:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
 51a:	80 8d       	ldd	r24, Z+24	; 0x18
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	98 2f       	mov	r25, r24
 520:	88 27       	eor	r24, r24
 522:	21 8d       	ldd	r18, Z+25	; 0x19
 524:	82 0f       	add	r24, r18
 526:	91 1d       	adc	r25, r1
 528:	91 8f       	std	Z+25, r25	; 0x19
 52a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
 52c:	82 8d       	ldd	r24, Z+26	; 0x1a
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	98 2f       	mov	r25, r24
 532:	88 27       	eor	r24, r24
 534:	23 8d       	ldd	r18, Z+27	; 0x1b
 536:	82 0f       	add	r24, r18
 538:	91 1d       	adc	r25, r1
 53a:	93 8f       	std	Z+27, r25	; 0x1b
 53c:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
 53e:	84 8d       	ldd	r24, Z+28	; 0x1c
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	98 2f       	mov	r25, r24
 544:	88 27       	eor	r24, r24
 546:	25 8d       	ldd	r18, Z+29	; 0x1d
 548:	82 0f       	add	r24, r18
 54a:	91 1d       	adc	r25, r1
 54c:	95 8f       	std	Z+29, r25	; 0x1d
 54e:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
 550:	86 8d       	ldd	r24, Z+30	; 0x1e
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	98 2f       	mov	r25, r24
 556:	88 27       	eor	r24, r24
 558:	27 8d       	ldd	r18, Z+31	; 0x1f
 55a:	82 0f       	add	r24, r18
 55c:	91 1d       	adc	r25, r1
 55e:	97 8f       	std	Z+31, r25	; 0x1f
 560:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
 562:	80 a1       	ldd	r24, Z+32	; 0x20
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	98 2f       	mov	r25, r24
 568:	88 27       	eor	r24, r24
 56a:	21 a1       	ldd	r18, Z+33	; 0x21
 56c:	82 0f       	add	r24, r18
 56e:	91 1d       	adc	r25, r1
 570:	91 a3       	std	Z+33, r25	; 0x21
 572:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
 574:	82 a1       	ldd	r24, Z+34	; 0x22
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	98 2f       	mov	r25, r24
 57a:	88 27       	eor	r24, r24
 57c:	23 a1       	ldd	r18, Z+35	; 0x23
 57e:	82 0f       	add	r24, r18
 580:	91 1d       	adc	r25, r1
 582:	93 a3       	std	Z+35, r25	; 0x23
 584:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
 586:	82 a5       	ldd	r24, Z+42	; 0x2a
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	21 a5       	ldd	r18, Z+41	; 0x29
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	32 2f       	mov	r19, r18
 590:	22 27       	eor	r18, r18
 592:	28 0f       	add	r18, r24
 594:	39 1f       	adc	r19, r25
 596:	36 a3       	std	Z+38, r19	; 0x26
 598:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
 59a:	20 a9       	ldd	r18, Z+48	; 0x30
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	32 2f       	mov	r19, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	95 a7       	std	Z+45, r25	; 0x2d
 5a8:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
 5aa:	82 a9       	ldd	r24, Z+50	; 0x32
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	98 2f       	mov	r25, r24
 5b0:	88 27       	eor	r24, r24
 5b2:	23 a9       	ldd	r18, Z+51	; 0x33
 5b4:	82 0f       	add	r24, r18
 5b6:	91 1d       	adc	r25, r1
 5b8:	97 a7       	std	Z+47, r25	; 0x2f
 5ba:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
 5bc:	84 a9       	ldd	r24, Z+52	; 0x34
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	98 2f       	mov	r25, r24
 5c2:	88 27       	eor	r24, r24
 5c4:	25 a9       	ldd	r18, Z+53	; 0x35
 5c6:	82 0f       	add	r24, r18
 5c8:	91 1d       	adc	r25, r1
 5ca:	91 ab       	std	Z+49, r25	; 0x31
 5cc:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
 5ce:	86 a9       	ldd	r24, Z+54	; 0x36
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	98 2f       	mov	r25, r24
 5d4:	88 27       	eor	r24, r24
 5d6:	27 a9       	ldd	r18, Z+55	; 0x37
 5d8:	82 0f       	add	r24, r18
 5da:	91 1d       	adc	r25, r1
 5dc:	93 ab       	std	Z+51, r25	; 0x33
 5de:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
 5e0:	83 e2       	ldi	r24, 0x23	; 35
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	4f d0       	rcall	.+158    	; 0x684 <wait_ms>
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	08 95       	ret

000005f4 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
 5fe:	09 e9       	ldi	r16, 0x99	; 153
 600:	10 e0       	ldi	r17, 0x00	; 0
 602:	80 e1       	ldi	r24, 0x10	; 16
 604:	f8 01       	movw	r30, r16
 606:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
 608:	88 e1       	ldi	r24, 0x18	; 24
 60a:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
 614:	80 e8       	ldi	r24, 0x80	; 128
 616:	f0 de       	rcall	.-544    	; 0x3f8 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
 618:	81 e8       	ldi	r24, 0x81	; 129
 61a:	ee de       	rcall	.-548    	; 0x3f8 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
 61c:	88 e0       	ldi	r24, 0x08	; 8
 61e:	ec de       	rcall	.-552    	; 0x3f8 <oi_byte_tx>
	wait_ms(100);
 620:	84 e6       	ldi	r24, 0x64	; 100
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	2f d0       	rcall	.+94     	; 0x684 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
 626:	81 e2       	ldi	r24, 0x21	; 33
 628:	f8 01       	movw	r30, r16
 62a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
 62c:	84 e8       	ldi	r24, 0x84	; 132
 62e:	e4 de       	rcall	.-568    	; 0x3f8 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	47 e0       	ldi	r20, 0x07	; 7
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	e7 de       	rcall	.-562    	; 0x408 <oi_set_leds>
	
	oi_update(self);
 63a:	ce 01       	movw	r24, r28
 63c:	20 df       	rcall	.-448    	; 0x47e <oi_update>
	oi_update(self); // call twice to clear distance/angle
 63e:	ce 01       	movw	r24, r28
 640:	1e df       	rcall	.-452    	; 0x47e <oi_update>
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	08 95       	ret

0000064c <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
 64c:	10 92 13 01 	sts	0x0113, r1
 650:	10 92 12 01 	sts	0x0112, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
 654:	81 11       	cpse	r24, r1
 656:	06 c0       	rjmp	.+12     	; 0x664 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
 658:	8b e0       	ldi	r24, 0x0B	; 11
 65a:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 65c:	87 b7       	in	r24, 0x37	; 55
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	87 bf       	out	0x37, r24	; 55
 662:	07 c0       	rjmp	.+14     	; 0x672 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	29 f4       	brne	.+10     	; 0x672 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
 668:	89 e0       	ldi	r24, 0x09	; 9
 66a:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 66c:	87 b7       	in	r24, 0x37	; 55
 66e:	80 68       	ori	r24, 0x80	; 128
 670:	87 bf       	out	0x37, r24	; 55
	}
	sei();
 672:	78 94       	sei
 674:	08 95       	ret

00000676 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
 676:	87 b7       	in	r24, 0x37	; 55
 678:	8f 77       	andi	r24, 0x7F	; 127
 67a:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
 67c:	85 b5       	in	r24, 0x25	; 37
 67e:	8f 77       	andi	r24, 0x7F	; 127
 680:	85 bd       	out	0x25, r24	; 37
 682:	08 95       	ret

00000684 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
	OCR2=250; 				
 68a:	8a ef       	ldi	r24, 0xFA	; 250
 68c:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
 68e:	10 92 13 01 	sts	0x0113, r1
 692:	10 92 12 01 	sts	0x0112, r1
	timer2_start(0);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	d9 df       	rcall	.-78     	; 0x64c <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
 69a:	20 91 12 01 	lds	r18, 0x0112
 69e:	30 91 13 01 	lds	r19, 0x0113
 6a2:	2c 17       	cp	r18, r28
 6a4:	3d 07       	cpc	r19, r29
 6a6:	c8 f3       	brcs	.-14     	; 0x69a <wait_ms+0x16>

	timer2_stop();
 6a8:	e6 df       	rcall	.-52     	; 0x676 <timer2_stop>
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
	timer2_tick++;
 6be:	80 91 12 01 	lds	r24, 0x0112
 6c2:	90 91 13 01 	lds	r25, 0x0113
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	90 93 13 01 	sts	0x0113, r25
 6cc:	80 93 12 01 	sts	0x0112, r24
}
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <calloc>:
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	86 9f       	mul	r24, r22
 6e8:	80 01       	movw	r16, r0
 6ea:	87 9f       	mul	r24, r23
 6ec:	10 0d       	add	r17, r0
 6ee:	96 9f       	mul	r25, r22
 6f0:	10 0d       	add	r17, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	c8 01       	movw	r24, r16
 6f6:	0d d0       	rcall	.+26     	; 0x712 <malloc>
 6f8:	ec 01       	movw	r28, r24
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	21 f0       	breq	.+8      	; 0x706 <calloc+0x28>
 6fe:	a8 01       	movw	r20, r16
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	2d d1       	rcall	.+602    	; 0x960 <memset>
 706:	ce 01       	movw	r24, r28
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	08 95       	ret

00000712 <malloc>:
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	82 30       	cpi	r24, 0x02	; 2
 718:	91 05       	cpc	r25, r1
 71a:	10 f4       	brcc	.+4      	; 0x720 <malloc+0xe>
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	e0 91 16 01 	lds	r30, 0x0116
 724:	f0 91 17 01 	lds	r31, 0x0117
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	a0 e0       	ldi	r26, 0x00	; 0
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	30 97       	sbiw	r30, 0x00	; 0
 732:	39 f1       	breq	.+78     	; 0x782 <malloc+0x70>
 734:	40 81       	ld	r20, Z
 736:	51 81       	ldd	r21, Z+1	; 0x01
 738:	48 17       	cp	r20, r24
 73a:	59 07       	cpc	r21, r25
 73c:	b8 f0       	brcs	.+46     	; 0x76c <malloc+0x5a>
 73e:	48 17       	cp	r20, r24
 740:	59 07       	cpc	r21, r25
 742:	71 f4       	brne	.+28     	; 0x760 <malloc+0x4e>
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	10 97       	sbiw	r26, 0x00	; 0
 74a:	29 f0       	breq	.+10     	; 0x756 <malloc+0x44>
 74c:	13 96       	adiw	r26, 0x03	; 3
 74e:	9c 93       	st	X, r25
 750:	8e 93       	st	-X, r24
 752:	12 97       	sbiw	r26, 0x02	; 2
 754:	2c c0       	rjmp	.+88     	; 0x7ae <malloc+0x9c>
 756:	90 93 17 01 	sts	0x0117, r25
 75a:	80 93 16 01 	sts	0x0116, r24
 75e:	27 c0       	rjmp	.+78     	; 0x7ae <malloc+0x9c>
 760:	21 15       	cp	r18, r1
 762:	31 05       	cpc	r19, r1
 764:	31 f0       	breq	.+12     	; 0x772 <malloc+0x60>
 766:	42 17       	cp	r20, r18
 768:	53 07       	cpc	r21, r19
 76a:	18 f0       	brcs	.+6      	; 0x772 <malloc+0x60>
 76c:	a9 01       	movw	r20, r18
 76e:	db 01       	movw	r26, r22
 770:	01 c0       	rjmp	.+2      	; 0x774 <malloc+0x62>
 772:	ef 01       	movw	r28, r30
 774:	9a 01       	movw	r18, r20
 776:	bd 01       	movw	r22, r26
 778:	df 01       	movw	r26, r30
 77a:	02 80       	ldd	r0, Z+2	; 0x02
 77c:	f3 81       	ldd	r31, Z+3	; 0x03
 77e:	e0 2d       	mov	r30, r0
 780:	d7 cf       	rjmp	.-82     	; 0x730 <malloc+0x1e>
 782:	21 15       	cp	r18, r1
 784:	31 05       	cpc	r19, r1
 786:	f9 f0       	breq	.+62     	; 0x7c6 <malloc+0xb4>
 788:	28 1b       	sub	r18, r24
 78a:	39 0b       	sbc	r19, r25
 78c:	24 30       	cpi	r18, 0x04	; 4
 78e:	31 05       	cpc	r19, r1
 790:	80 f4       	brcc	.+32     	; 0x7b2 <malloc+0xa0>
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	9b 81       	ldd	r25, Y+3	; 0x03
 796:	61 15       	cp	r22, r1
 798:	71 05       	cpc	r23, r1
 79a:	21 f0       	breq	.+8      	; 0x7a4 <malloc+0x92>
 79c:	fb 01       	movw	r30, r22
 79e:	93 83       	std	Z+3, r25	; 0x03
 7a0:	82 83       	std	Z+2, r24	; 0x02
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <malloc+0x9a>
 7a4:	90 93 17 01 	sts	0x0117, r25
 7a8:	80 93 16 01 	sts	0x0116, r24
 7ac:	fe 01       	movw	r30, r28
 7ae:	32 96       	adiw	r30, 0x02	; 2
 7b0:	44 c0       	rjmp	.+136    	; 0x83a <malloc+0x128>
 7b2:	fe 01       	movw	r30, r28
 7b4:	e2 0f       	add	r30, r18
 7b6:	f3 1f       	adc	r31, r19
 7b8:	81 93       	st	Z+, r24
 7ba:	91 93       	st	Z+, r25
 7bc:	22 50       	subi	r18, 0x02	; 2
 7be:	31 09       	sbc	r19, r1
 7c0:	39 83       	std	Y+1, r19	; 0x01
 7c2:	28 83       	st	Y, r18
 7c4:	3a c0       	rjmp	.+116    	; 0x83a <malloc+0x128>
 7c6:	20 91 14 01 	lds	r18, 0x0114
 7ca:	30 91 15 01 	lds	r19, 0x0115
 7ce:	23 2b       	or	r18, r19
 7d0:	41 f4       	brne	.+16     	; 0x7e2 <malloc+0xd0>
 7d2:	20 91 02 01 	lds	r18, 0x0102
 7d6:	30 91 03 01 	lds	r19, 0x0103
 7da:	30 93 15 01 	sts	0x0115, r19
 7de:	20 93 14 01 	sts	0x0114, r18
 7e2:	20 91 00 01 	lds	r18, 0x0100
 7e6:	30 91 01 01 	lds	r19, 0x0101
 7ea:	21 15       	cp	r18, r1
 7ec:	31 05       	cpc	r19, r1
 7ee:	41 f4       	brne	.+16     	; 0x800 <malloc+0xee>
 7f0:	2d b7       	in	r18, 0x3d	; 61
 7f2:	3e b7       	in	r19, 0x3e	; 62
 7f4:	40 91 04 01 	lds	r20, 0x0104
 7f8:	50 91 05 01 	lds	r21, 0x0105
 7fc:	24 1b       	sub	r18, r20
 7fe:	35 0b       	sbc	r19, r21
 800:	e0 91 14 01 	lds	r30, 0x0114
 804:	f0 91 15 01 	lds	r31, 0x0115
 808:	e2 17       	cp	r30, r18
 80a:	f3 07       	cpc	r31, r19
 80c:	a0 f4       	brcc	.+40     	; 0x836 <malloc+0x124>
 80e:	2e 1b       	sub	r18, r30
 810:	3f 0b       	sbc	r19, r31
 812:	28 17       	cp	r18, r24
 814:	39 07       	cpc	r19, r25
 816:	78 f0       	brcs	.+30     	; 0x836 <malloc+0x124>
 818:	ac 01       	movw	r20, r24
 81a:	4e 5f       	subi	r20, 0xFE	; 254
 81c:	5f 4f       	sbci	r21, 0xFF	; 255
 81e:	24 17       	cp	r18, r20
 820:	35 07       	cpc	r19, r21
 822:	48 f0       	brcs	.+18     	; 0x836 <malloc+0x124>
 824:	4e 0f       	add	r20, r30
 826:	5f 1f       	adc	r21, r31
 828:	50 93 15 01 	sts	0x0115, r21
 82c:	40 93 14 01 	sts	0x0114, r20
 830:	81 93       	st	Z+, r24
 832:	91 93       	st	Z+, r25
 834:	02 c0       	rjmp	.+4      	; 0x83a <malloc+0x128>
 836:	e0 e0       	ldi	r30, 0x00	; 0
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	cf 01       	movw	r24, r30
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <free>:
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	00 97       	sbiw	r24, 0x00	; 0
 848:	09 f4       	brne	.+2      	; 0x84c <free+0xa>
 84a:	87 c0       	rjmp	.+270    	; 0x95a <free+0x118>
 84c:	fc 01       	movw	r30, r24
 84e:	32 97       	sbiw	r30, 0x02	; 2
 850:	13 82       	std	Z+3, r1	; 0x03
 852:	12 82       	std	Z+2, r1	; 0x02
 854:	c0 91 16 01 	lds	r28, 0x0116
 858:	d0 91 17 01 	lds	r29, 0x0117
 85c:	20 97       	sbiw	r28, 0x00	; 0
 85e:	81 f4       	brne	.+32     	; 0x880 <free+0x3e>
 860:	20 81       	ld	r18, Z
 862:	31 81       	ldd	r19, Z+1	; 0x01
 864:	28 0f       	add	r18, r24
 866:	39 1f       	adc	r19, r25
 868:	80 91 14 01 	lds	r24, 0x0114
 86c:	90 91 15 01 	lds	r25, 0x0115
 870:	82 17       	cp	r24, r18
 872:	93 07       	cpc	r25, r19
 874:	79 f5       	brne	.+94     	; 0x8d4 <free+0x92>
 876:	f0 93 15 01 	sts	0x0115, r31
 87a:	e0 93 14 01 	sts	0x0114, r30
 87e:	6d c0       	rjmp	.+218    	; 0x95a <free+0x118>
 880:	de 01       	movw	r26, r28
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	ae 17       	cp	r26, r30
 888:	bf 07       	cpc	r27, r31
 88a:	50 f4       	brcc	.+20     	; 0x8a0 <free+0x5e>
 88c:	12 96       	adiw	r26, 0x02	; 2
 88e:	4d 91       	ld	r20, X+
 890:	5c 91       	ld	r21, X
 892:	13 97       	sbiw	r26, 0x03	; 3
 894:	9d 01       	movw	r18, r26
 896:	41 15       	cp	r20, r1
 898:	51 05       	cpc	r21, r1
 89a:	09 f1       	breq	.+66     	; 0x8de <free+0x9c>
 89c:	da 01       	movw	r26, r20
 89e:	f3 cf       	rjmp	.-26     	; 0x886 <free+0x44>
 8a0:	b3 83       	std	Z+3, r27	; 0x03
 8a2:	a2 83       	std	Z+2, r26	; 0x02
 8a4:	40 81       	ld	r20, Z
 8a6:	51 81       	ldd	r21, Z+1	; 0x01
 8a8:	84 0f       	add	r24, r20
 8aa:	95 1f       	adc	r25, r21
 8ac:	8a 17       	cp	r24, r26
 8ae:	9b 07       	cpc	r25, r27
 8b0:	71 f4       	brne	.+28     	; 0x8ce <free+0x8c>
 8b2:	8d 91       	ld	r24, X+
 8b4:	9c 91       	ld	r25, X
 8b6:	11 97       	sbiw	r26, 0x01	; 1
 8b8:	84 0f       	add	r24, r20
 8ba:	95 1f       	adc	r25, r21
 8bc:	02 96       	adiw	r24, 0x02	; 2
 8be:	91 83       	std	Z+1, r25	; 0x01
 8c0:	80 83       	st	Z, r24
 8c2:	12 96       	adiw	r26, 0x02	; 2
 8c4:	8d 91       	ld	r24, X+
 8c6:	9c 91       	ld	r25, X
 8c8:	13 97       	sbiw	r26, 0x03	; 3
 8ca:	93 83       	std	Z+3, r25	; 0x03
 8cc:	82 83       	std	Z+2, r24	; 0x02
 8ce:	21 15       	cp	r18, r1
 8d0:	31 05       	cpc	r19, r1
 8d2:	29 f4       	brne	.+10     	; 0x8de <free+0x9c>
 8d4:	f0 93 17 01 	sts	0x0117, r31
 8d8:	e0 93 16 01 	sts	0x0116, r30
 8dc:	3e c0       	rjmp	.+124    	; 0x95a <free+0x118>
 8de:	d9 01       	movw	r26, r18
 8e0:	13 96       	adiw	r26, 0x03	; 3
 8e2:	fc 93       	st	X, r31
 8e4:	ee 93       	st	-X, r30
 8e6:	12 97       	sbiw	r26, 0x02	; 2
 8e8:	4d 91       	ld	r20, X+
 8ea:	5d 91       	ld	r21, X+
 8ec:	a4 0f       	add	r26, r20
 8ee:	b5 1f       	adc	r27, r21
 8f0:	ea 17       	cp	r30, r26
 8f2:	fb 07       	cpc	r31, r27
 8f4:	79 f4       	brne	.+30     	; 0x914 <free+0xd2>
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	02 96       	adiw	r24, 0x02	; 2
 900:	d9 01       	movw	r26, r18
 902:	11 96       	adiw	r26, 0x01	; 1
 904:	9c 93       	st	X, r25
 906:	8e 93       	st	-X, r24
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	93 81       	ldd	r25, Z+3	; 0x03
 90c:	13 96       	adiw	r26, 0x03	; 3
 90e:	9c 93       	st	X, r25
 910:	8e 93       	st	-X, r24
 912:	12 97       	sbiw	r26, 0x02	; 2
 914:	e0 e0       	ldi	r30, 0x00	; 0
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	9b 81       	ldd	r25, Y+3	; 0x03
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	19 f0       	breq	.+6      	; 0x926 <free+0xe4>
 920:	fe 01       	movw	r30, r28
 922:	ec 01       	movw	r28, r24
 924:	f9 cf       	rjmp	.-14     	; 0x918 <free+0xd6>
 926:	ce 01       	movw	r24, r28
 928:	02 96       	adiw	r24, 0x02	; 2
 92a:	28 81       	ld	r18, Y
 92c:	39 81       	ldd	r19, Y+1	; 0x01
 92e:	82 0f       	add	r24, r18
 930:	93 1f       	adc	r25, r19
 932:	20 91 14 01 	lds	r18, 0x0114
 936:	30 91 15 01 	lds	r19, 0x0115
 93a:	28 17       	cp	r18, r24
 93c:	39 07       	cpc	r19, r25
 93e:	69 f4       	brne	.+26     	; 0x95a <free+0x118>
 940:	30 97       	sbiw	r30, 0x00	; 0
 942:	29 f4       	brne	.+10     	; 0x94e <free+0x10c>
 944:	10 92 17 01 	sts	0x0117, r1
 948:	10 92 16 01 	sts	0x0116, r1
 94c:	02 c0       	rjmp	.+4      	; 0x952 <free+0x110>
 94e:	13 82       	std	Z+3, r1	; 0x03
 950:	12 82       	std	Z+2, r1	; 0x02
 952:	d0 93 15 01 	sts	0x0115, r29
 956:	c0 93 14 01 	sts	0x0114, r28
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	08 95       	ret

00000960 <memset>:
 960:	dc 01       	movw	r26, r24
 962:	01 c0       	rjmp	.+2      	; 0x966 <memset+0x6>
 964:	6d 93       	st	X+, r22
 966:	41 50       	subi	r20, 0x01	; 1
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	e0 f7       	brcc	.-8      	; 0x964 <memset+0x4>
 96c:	08 95       	ret

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
